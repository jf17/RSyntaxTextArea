/* The following code was generated by JFlex 1.4.1 on 09.01.19 15:38 */

/*
 * 09/01/2019
 *
 * GoTokenMaker.java - An object that can take a chunk of text and
 * return a linked list of tokens representing it in the C programming
 * language.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for the Go programming language.
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>CTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.6
 *
 */

public class GoTokenMaker extends AbstractJFlexGoTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\50\1\43\1\0\1\50\1\56\22\0\1\50\1\36\1\44"+
    "\1\57\1\60\1\65\1\106\1\33\1\31\1\31\1\51\1\7\1\64"+
    "\1\37\1\54\1\32\1\47\3\41\4\5\2\3\1\70\1\63\1\34"+
    "\1\30\1\35\1\27\1\61\2\4\1\77\1\4\1\6\1\55\1\100"+
    "\2\1\1\103\1\1\1\53\1\1\1\104\1\1\1\76\1\1\1\102"+
    "\1\101\1\1\1\52\2\1\1\42\2\1\1\62\1\40\1\62\1\110"+
    "\1\2\1\0\1\24\1\46\1\21\1\10\1\11\1\12\1\25\1\66"+
    "\1\13\1\1\1\72\1\15\1\26\1\14\1\20\1\23\1\1\1\17"+
    "\1\16\1\67\1\22\1\45\1\71\1\73\1\75\1\74\1\105\1\107"+
    "\1\105\1\64\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\2\1\4\14\2\2\4"+
    "\1\5\1\4\1\6\3\4\1\2\1\7\1\10\2\2"+
    "\1\3\1\11\1\4\2\1\1\2\1\4\13\2\2\4"+
    "\2\12\1\13\5\12\1\14\2\12\2\15\2\3\1\16"+
    "\2\2\1\17\11\2\1\17\1\2\1\20\10\2\1\20"+
    "\4\2\1\0\1\21\1\22\2\23\1\24\1\6\2\10"+
    "\1\25\3\2\1\15\6\1\1\0\17\2\2\0\1\26"+
    "\6\0\1\3\1\0\1\3\1\15\1\16\13\2\1\27"+
    "\2\2\1\30\16\2\1\6\1\31\1\6\3\23\1\6"+
    "\2\10\1\32\3\2\1\33\4\1\1\30\4\1\6\0"+
    "\10\2\1\34\4\2\10\0\1\16\1\0\1\34\21\2"+
    "\1\6\1\10\1\2\2\33\7\1\4\0\1\30\4\0"+
    "\10\2\2\0\1\35\2\0\1\36\13\2\1\33\1\30"+
    "\3\1\7\0\5\2\4\0\1\2\1\27\2\2\2\1"+
    "\1\30\3\0\3\2\2\0\2\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447"+
    "\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646\0\u068f"+
    "\0\u06d8\0\u0721\0\u076a\0\u07b3\0\333\0\u0646\0\u07fc\0\u0845"+
    "\0\u088e\0\u08d7\0\u0920\0\u0969\0\u0646\0\u09b2\0\u0646\0\u0646"+
    "\0\u09fb\0\u0a44\0\u0a8d\0\u0ad6\0\u0b1f\0\u0b68\0\u0bb1\0\u0bfa"+
    "\0\u0c43\0\u0c8c\0\u0cd5\0\u0d1e\0\u0d67\0\u0db0\0\u0df9\0\u0646"+
    "\0\u0e42\0\u0e8b\0\u0ed4\0\u0f1d\0\u0f66\0\u0646\0\u0faf\0\u0ff8"+
    "\0\u1041\0\u108a\0\u10d3\0\u111c\0\u1165\0\u11ae\0\u11f7\0\u1240"+
    "\0\u1289\0\u12d2\0\u131b\0\u1364\0\u13ad\0\u13f6\0\u143f\0\u1488"+
    "\0\u14d1\0\u0124\0\u151a\0\u1563\0\u15ac\0\u15f5\0\u163e\0\u1687"+
    "\0\u16d0\0\u1719\0\u1762\0\u17ab\0\u0124\0\u17f4\0\u183d\0\u1886"+
    "\0\u18cf\0\u1918\0\u0646\0\u0646\0\u1961\0\u19aa\0\u0646\0\u19f3"+
    "\0\u1a3c\0\u1a85\0\u0646\0\u1ace\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2"+
    "\0\u1c3b\0\u1c84\0\u1ccd\0\u1d16\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a"+
    "\0\u1e83\0\u1ecc\0\u1f15\0\u1f5e\0\u1fa7\0\u1ff0\0\u2039\0\u2082"+
    "\0\u20cb\0\u2114\0\u215d\0\u21a6\0\u21ef\0\u2238\0\u2281\0\u0646"+
    "\0\u22ca\0\u2313\0\u235c\0\u23a5\0\u23ee\0\u2437\0\u2480\0\u24c9"+
    "\0\u1041\0\u2512\0\u1041\0\u255b\0\u25a4\0\u25ed\0\u2636\0\u267f"+
    "\0\u26c8\0\u2711\0\u275a\0\u27a3\0\u27ec\0\u2835\0\u0124\0\u287e"+
    "\0\u28c7\0\u0124\0\u2910\0\u2959\0\u29a2\0\u29eb\0\u2a34\0\u2a7d"+
    "\0\u2ac6\0\u2b0f\0\u2b58\0\u2ba1\0\u2bea\0\u2c33\0\u2c7c\0\u2cc5"+
    "\0\u2d0e\0\u0646\0\u2d57\0\u2da0\0\u2de9\0\u2e32\0\u2e7b\0\u2ec4"+
    "\0\u2f0d\0\u0646\0\u2f56\0\u2f9f\0\u2fe8\0\u3031\0\u307a\0\u30c3"+
    "\0\u310c\0\u3155\0\u319e\0\u31e7\0\u3230\0\u3279\0\u32c2\0\u330b"+
    "\0\u3354\0\u339d\0\u33e6\0\u342f\0\u3478\0\u34c1\0\u350a\0\u3553"+
    "\0\u359c\0\u35e5\0\u362e\0\u3677\0\u36c0\0\u3709\0\u3752\0\u379b"+
    "\0\u37e4\0\u382d\0\u3876\0\u38bf\0\u3908\0\u3951\0\u399a\0\u39e3"+
    "\0\u3a2c\0\u3a75\0\u3abe\0\u3b07\0\u0124\0\u3b50\0\u3b99\0\u3be2"+
    "\0\u3c2b\0\u3c74\0\u3cbd\0\u3d06\0\u3d4f\0\u3d98\0\u3de1\0\u3e2a"+
    "\0\u3e73\0\u3ebc\0\u3f05\0\u3f4e\0\u3f97\0\u3fe0\0\u4029\0\u4072"+
    "\0\u40bb\0\u4104\0\u414d\0\u4196\0\u41df\0\u4228\0\u4271\0\u42ba"+
    "\0\u4303\0\u434c\0\u4395\0\u43de\0\u4427\0\u4470\0\u44b9\0\u4502"+
    "\0\u454b\0\u4594\0\u45dd\0\u4626\0\u466f\0\u46b8\0\u4701\0\u474a"+
    "\0\u4793\0\u47dc\0\u4825\0\u486e\0\u48b7\0\u4900\0\u4949\0\u4992"+
    "\0\u49db\0\u4a24\0\u4a6d\0\u4ab6\0\u4aff\0\u4b48\0\u4b91\0\u4bda"+
    "\0\u4c23\0\u4c6c\0\u4cb5\0\u4cfe\0\u1041\0\333\0\u4d47\0\u4d90"+
    "\0\u4dd9\0\u4e22\0\u4e6b\0\u4eb4\0\u4efd\0\u4f46\0\u4f8f\0\u4fd8"+
    "\0\u5021\0\u506a\0\u50b3\0\u50fc\0\u5145\0\u518e\0\u4900\0\u51d7"+
    "\0\u49db\0\u5220\0\u0490\0\u5269\0\u52b2\0\u52fb\0\u5344\0\u0646"+
    "\0\u538d\0\u53d6\0\u541f\0\u5468\0\u54b1\0\u54fa\0\u5543\0\u558c"+
    "\0\u55d5\0\u561e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\5\1\23\1\5\1\24\1\5\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\26\1\34\1\35"+
    "\1\6\1\5\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\26\2\5\1\44\1\5\1\45\1\46\2\4\1\27"+
    "\1\47\1\50\1\26\1\51\1\52\1\26\1\53\1\5"+
    "\1\54\2\5\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\27\1\64\1\65\1\26\12\66\1\67\30\66"+
    "\1\70\5\66\1\71\14\66\1\72\2\66\1\73\17\66"+
    "\12\74\1\75\30\74\1\76\22\74\1\77\2\74\1\100"+
    "\17\74\7\4\1\0\17\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\2\4"+
    "\1\0\14\4\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\14\5"+
    "\4\0\3\101\1\6\1\101\1\6\1\102\1\0\1\101"+
    "\1\102\3\101\1\103\4\101\1\104\4\101\11\0\1\101"+
    "\1\6\1\101\2\0\2\101\1\6\2\0\1\104\1\103"+
    "\1\105\1\101\1\0\3\101\4\0\2\101\1\0\14\101"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\2\5\1\106\11\5"+
    "\13\0\1\50\20\0\1\50\60\0\1\4\6\5\1\0"+
    "\1\5\1\107\6\5\1\110\6\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\14\5\4\0\1\4"+
    "\6\5\1\0\4\5\1\111\1\112\11\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\2\5\1\113"+
    "\11\5\4\0\1\4\6\5\1\0\3\5\1\114\1\5"+
    "\1\115\2\5\1\116\1\5\1\117\1\5\1\120\1\5"+
    "\1\121\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\14\5\4\0\1\4\6\5\1\0\2\5\1\122"+
    "\1\5\1\123\3\5\1\124\5\5\1\125\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\3\5\1\126\13\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\10\5\1\127\6\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\3\5\1\130\13\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\131\1\132\1\0\1\133"+
    "\13\5\4\0\1\4\6\5\1\0\1\5\1\134\15\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\14\5\4\0\1\4\6\5\1\0\6\5\1\135\10\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\14\5\4\0\1\4\6\5\1\0\10\5\1\136\3\5"+
    "\1\112\2\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\137\1\5\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\14\5\1\140\2\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\10\5\1\141\6\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\14\5\33\0\1\142\111\0\1\50"+
    "\221\0\1\50\1\0\1\143\16\0\1\144\37\0\27\145"+
    "\1\146\3\145\1\147\4\145\1\150\2\145\1\0\45\145"+
    "\30\0\1\50\3\0\1\26\104\0\1\50\4\0\1\26"+
    "\103\0\1\50\6\0\1\50\51\0\40\37\1\151\2\37"+
    "\1\152\1\153\44\37\1\4\6\5\1\0\10\5\1\154"+
    "\3\5\1\116\2\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\7\5\1\155\1\156\6\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\14\5\4\0\3\101\1\6"+
    "\1\101\1\6\1\102\1\0\1\101\1\102\3\101\1\103"+
    "\4\101\1\104\4\101\11\0\1\101\1\6\1\157\2\0"+
    "\2\101\1\6\2\0\1\104\1\103\1\105\1\101\1\0"+
    "\3\101\4\0\2\101\1\0\2\101\1\157\11\101\54\0"+
    "\1\43\43\0\1\105\1\0\1\105\33\0\1\105\5\0"+
    "\1\105\41\0\7\4\1\0\1\160\1\161\1\4\1\162"+
    "\1\4\1\163\4\4\1\164\1\165\3\4\11\0\3\4"+
    "\2\0\3\4\1\166\1\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\14\4\4\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\167\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\7\5\1\170\7\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\4\5\1\171\7\5\4\0\1\4"+
    "\6\5\1\0\11\5\1\172\5\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\173\1\5\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\16\5\1\174\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\14\5\4\0\1\4"+
    "\6\5\1\0\7\5\1\175\7\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\14\5\4\0\1\4"+
    "\6\5\1\0\5\5\1\176\1\5\1\177\1\200\6\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\14\5\4\0\1\4\6\5\1\0\1\5\1\201\15\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\14\5\4\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\202\1\0\14\5"+
    "\4\0\1\4\6\5\1\0\1\5\1\203\15\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\14\5"+
    "\4\0\1\4\6\5\1\0\10\5\1\204\6\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\14\5"+
    "\4\0\1\4\6\5\1\0\1\5\1\205\15\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\14\5"+
    "\34\0\1\50\55\0\1\50\32\0\1\50\56\0\1\50"+
    "\1\0\12\66\1\0\30\66\1\0\5\66\1\0\14\66"+
    "\1\0\2\66\1\0\17\66\13\0\1\206\53\0\1\207"+
    "\53\0\1\210\145\0\1\211\112\0\1\212\17\0\12\74"+
    "\1\0\30\74\1\0\22\74\1\0\2\74\1\0\17\74"+
    "\13\0\1\213\53\0\1\214\110\0\1\215\112\0\1\216"+
    "\17\0\7\101\1\0\17\101\11\0\3\101\2\0\3\101"+
    "\2\0\2\101\1\0\1\101\1\0\3\101\4\0\2\101"+
    "\1\0\14\101\4\0\3\101\1\217\1\101\1\217\1\101"+
    "\1\220\17\101\10\0\1\220\1\101\1\217\1\101\2\0"+
    "\2\101\1\217\2\0\2\101\1\0\1\101\1\0\3\101"+
    "\4\0\2\101\1\0\14\101\4\0\7\101\1\0\12\101"+
    "\1\221\4\101\11\0\3\101\2\0\3\101\2\0\1\221"+
    "\1\101\1\0\1\101\1\0\3\101\4\0\2\101\1\0"+
    "\14\101\4\0\7\101\1\0\5\101\1\221\11\101\11\0"+
    "\3\101\2\0\3\101\2\0\1\101\1\221\1\0\1\101"+
    "\1\0\3\101\4\0\2\101\1\0\14\101\4\0\3\101"+
    "\1\105\1\101\1\105\1\222\1\0\1\101\1\222\1\223"+
    "\2\101\1\223\11\101\11\0\1\101\1\105\1\101\2\0"+
    "\2\101\1\105\2\0\1\101\1\223\1\0\1\223\1\0"+
    "\3\101\4\0\2\101\1\0\14\101\4\0\1\4\6\5"+
    "\1\0\3\5\1\224\13\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\14\5\4\0\1\4\6\5"+
    "\1\0\2\5\1\225\14\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\14\5\4\0\1\4\6\5"+
    "\1\0\12\5\1\226\4\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\14\5\4\0\1\4\6\5"+
    "\1\0\12\5\1\227\4\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\14\5\4\0\1\4\6\5"+
    "\1\0\6\5\1\230\10\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\14\5\4\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\231\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\5\5\1\232\11\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\10\5\1\233\6\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\7\5\1\122\7\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\4\5\1\234\12\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\5\5\1\235\11\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\135\1\0\14\5\4\0\1\4\6\5\1\0\11\5"+
    "\1\236\5\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\237\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\12\5\1\240\4\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\13\5\1\241\3\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\5\5\1\242\11\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\4\5\1\243\12\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\15\5\1\244\1\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\3\5\1\245\10\5\4\0\1\4"+
    "\6\5\1\0\10\5\1\246\6\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\14\5\4\0\1\4"+
    "\6\5\1\0\7\5\1\247\4\5\1\250\2\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\14\5"+
    "\4\0\1\4\6\5\1\0\3\5\1\251\13\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\14\5"+
    "\4\0\1\4\6\5\1\0\15\5\1\252\1\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\253\1\0"+
    "\14\5\4\0\1\4\6\5\1\0\4\5\1\254\12\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\14\5\4\0\1\4\6\5\1\0\14\5\1\255\2\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\14\5\4\0\1\4\6\5\1\0\4\5\1\256\4\5"+
    "\1\257\5\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\14\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\260"+
    "\1\0\14\5\34\0\10\50\51\0\33\261\1\262\7\261"+
    "\1\0\74\261\1\263\3\261\1\262\7\261\1\0\52\261"+
    "\1\264\3\261\2\145\1\261\1\145\2\261\1\145\4\261"+
    "\1\145\2\261\1\145\3\261\1\265\4\261\1\145\1\266"+
    "\1\267\1\0\3\145\1\266\17\261\1\145\3\261\1\267"+
    "\15\261\5\152\1\37\3\152\2\37\1\152\1\37\2\152"+
    "\1\37\4\152\1\37\2\152\1\37\3\152\1\37\4\152"+
    "\2\37\1\270\1\0\4\37\17\152\1\37\3\152\1\270"+
    "\55\152\1\271\3\152\1\272\44\152\1\4\6\5\1\0"+
    "\3\5\1\273\13\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\1\5\1\274\15\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\10\5\1\275\6\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\14\5\4\0\3\101\4\276\1\0"+
    "\3\276\6\101\1\276\2\101\1\276\2\101\11\0\1\101"+
    "\1\276\1\101\2\0\1\101\2\276\2\0\2\101\1\0"+
    "\1\276\1\0\3\101\4\0\2\101\1\0\6\101\1\276"+
    "\5\101\4\0\7\4\1\0\1\4\1\277\15\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\14\4\4\0\7\4\1\0"+
    "\4\4\1\300\1\301\1\4\1\302\7\4\11\0\3\4"+
    "\2\0\3\4\2\0\2\4\1\0\1\4\1\0\3\4"+
    "\4\0\2\4\1\0\14\4\4\0\7\4\1\0\2\4"+
    "\1\303\1\4\1\304\12\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\2\4"+
    "\1\0\14\4\4\0\7\4\1\0\3\4\1\305\13\4"+
    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\14\4\4\0\7\4"+
    "\1\0\4\4\1\306\12\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\2\4"+
    "\1\0\14\4\4\0\7\4\1\0\7\4\1\307\7\4"+
    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\14\4\14\0\1\310"+
    "\1\311\1\0\1\312\1\0\1\313\4\0\1\314\1\315"+
    "\24\0\1\166\40\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\316\1\0"+
    "\14\5\4\0\1\4\6\5\1\0\12\5\1\317\4\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\14\5\4\0\1\4\6\5\1\0\13\5\1\230\3\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\14\5\4\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\320\1\5\1\0\14\5"+
    "\4\0\1\4\6\5\1\0\3\5\1\321\13\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\14\5"+
    "\4\0\1\4\6\5\1\0\5\5\1\135\11\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\14\5"+
    "\4\0\1\4\6\5\1\0\3\5\1\322\13\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\14\5"+
    "\4\0\1\4\6\5\1\0\10\5\1\323\6\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\14\5"+
    "\4\0\1\4\6\5\1\0\1\5\1\324\15\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\14\5"+
    "\4\0\1\4\6\5\1\0\13\5\1\325\3\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\14\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\326\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\14\5\1\224\2\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\13\5\1\327\1\330\2\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\14\5"+
    "\4\0\1\4\6\5\1\0\3\5\1\331\13\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\14\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\1\332\13\5\21\0"+
    "\1\333\116\0\1\334\154\0\1\335\112\0\1\336\34\0"+
    "\1\337\116\0\1\340\154\0\1\341\112\0\1\342\17\0"+
    "\3\101\1\217\1\101\1\217\1\101\1\0\5\101\1\103"+
    "\4\101\1\104\4\101\11\0\1\101\1\217\1\101\2\0"+
    "\2\101\1\217\2\0\1\104\1\103\1\0\1\101\1\0"+
    "\3\101\4\0\2\101\1\0\14\101\7\0\1\217\1\0"+
    "\1\217\33\0\1\217\5\0\1\217\41\0\3\101\1\343"+
    "\1\101\1\343\1\101\1\344\17\101\10\0\1\344\1\101"+
    "\1\343\1\101\2\0\2\101\1\343\2\0\2\101\1\0"+
    "\1\101\1\0\3\101\4\0\2\101\1\0\14\101\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\345\1\0\14\5\4\0\1\4"+
    "\6\5\1\0\1\5\1\116\12\5\1\346\2\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\14\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\1\5\1\347\1\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\14\5"+
    "\4\0\1\4\6\5\1\0\16\5\1\122\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\1\5\1\122\15\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\1\5\1\350\15\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\1\5\1\351\15\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\14\5\1\352\2\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\11\5\1\122\5\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\6\5\1\317\10\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\5\5\1\353\11\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\354\1\0\14\5\4\0\1\4"+
    "\6\5\1\0\10\5\1\355\6\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\14\5\4\0\1\4"+
    "\6\5\1\0\15\5\1\237\1\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\14\5\4\0\1\4"+
    "\6\5\1\0\4\5\1\356\12\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\14\5\4\0\1\4"+
    "\6\5\1\0\1\5\1\357\15\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\14\5\4\0\1\4"+
    "\6\5\1\0\7\5\1\352\7\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\14\5\4\0\1\4"+
    "\6\5\1\0\3\5\1\360\6\5\1\361\4\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\14\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\256\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\362\1\0\14\5\4\0\1\4"+
    "\6\5\1\0\3\5\1\363\13\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\14\5\4\0\1\4"+
    "\6\5\1\0\12\5\1\350\4\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\14\5\4\0\1\4"+
    "\6\5\1\0\6\5\1\364\10\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\365\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\7\5\1\237\7\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\3\5\1\234\13\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\1\5\1\366\12\5\4\0"+
    "\1\4\6\5\1\0\10\5\1\122\6\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\14\5\4\0"+
    "\33\261\1\147\7\261\1\0\75\261\3\145\1\265\4\145"+
    "\3\261\1\0\52\261\1\145\25\261\1\262\5\261\1\145"+
    "\1\261\1\0\3\261\1\145\41\261\33\0\1\262\55\0"+
    "\5\261\1\264\25\261\1\262\5\261\1\264\1\261\1\0"+
    "\3\261\1\264\44\261\4\367\1\261\3\367\6\261\1\367"+
    "\2\261\1\367\6\261\1\147\5\261\1\367\1\261\1\0"+
    "\2\261\2\367\5\261\1\367\21\261\1\367\11\261\3\152"+
    "\4\370\1\152\3\370\6\152\1\370\2\152\1\370\13\152"+
    "\1\271\1\370\2\152\1\272\1\152\2\370\5\152\1\370"+
    "\21\152\1\370\54\152\1\0\45\152\1\4\6\5\1\0"+
    "\1\237\16\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\14\5\4\0\1\4\6\5\1\0\14\5"+
    "\1\371\2\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\14\5\4\0\1\4\6\5\1\0\5\5"+
    "\1\237\11\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\14\5\4\0\3\101\4\276\1\0\3\276"+
    "\2\101\1\372\3\101\1\276\1\373\1\101\1\276\2\101"+
    "\11\0\1\101\1\276\1\101\2\0\1\101\2\276\2\0"+
    "\1\373\1\372\1\0\1\276\1\0\3\101\4\0\2\101"+
    "\1\0\6\101\1\276\5\101\4\0\7\4\1\0\2\4"+
    "\1\163\14\4\11\0\3\4\2\0\3\4\2\0\2\4"+
    "\1\0\1\4\1\0\3\4\4\0\2\4\1\0\14\4"+
    "\4\0\7\4\1\0\1\374\16\4\11\0\3\4\2\0"+
    "\3\4\2\0\2\4\1\0\1\4\1\0\3\4\4\0"+
    "\2\4\1\0\14\4\4\0\7\4\1\0\3\4\1\375"+
    "\2\4\1\376\10\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\14\4\4\0\7\4\1\0\7\4\1\377\7\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\14\4\4\0\7\4\1\0"+
    "\1\u0100\3\4\1\306\12\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\2\4"+
    "\1\0\14\4\4\0\7\4\1\0\11\4\1\u0101\5\4"+
    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\14\4\4\0\7\4"+
    "\1\0\4\4\1\376\12\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\2\4"+
    "\1\0\14\4\4\0\7\4\1\0\1\u0100\16\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\14\4\4\0\7\4\1\0"+
    "\14\4\1\u0102\2\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\14\4\15\0\1\u0103\113\0\1\u0104\1\u0105\1\0\1\u0106"+
    "\103\0\1\u0107\1\0\1\u0108\107\0\1\u0109\111\0\1\u010a"+
    "\113\0\1\u010b\71\0\1\4\6\5\1\0\13\5\1\135"+
    "\3\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\14\5\4\0\1\4\6\5\1\0\1\5\1\242"+
    "\15\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\14\5\4\0\1\4\6\5\1\0\14\5\1\u010c"+
    "\2\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\14\5\4\0\1\4\6\5\1\0\5\5\1\230"+
    "\11\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\14\5\4\0\1\4\6\5\1\0\4\5\1\u010d"+
    "\12\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\14\5\4\0\1\4\6\5\1\0\6\5\1\u010e"+
    "\10\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\14\5\4\0\1\4\6\5\1\0\14\5\1\u010f"+
    "\2\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\14\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\4\5"+
    "\1\345\7\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\1\u0110"+
    "\13\5\4\0\1\4\6\5\1\0\5\5\1\u0111\11\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\14\5\4\0\1\4\6\5\1\0\1\u0112\16\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\14\5"+
    "\4\0\1\4\6\5\1\0\4\5\1\345\12\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\14\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\11\5\1\u0113\2\5"+
    "\15\0\1\334\167\0\1\u0114\43\0\1\u0115\141\0\1\u0116"+
    "\45\0\1\340\167\0\1\u0117\43\0\1\u0118\141\0\1\u0119"+
    "\34\0\3\101\1\343\1\101\1\343\1\101\1\0\2\101"+
    "\1\223\2\101\1\223\11\101\11\0\1\101\1\343\1\101"+
    "\2\0\2\101\1\343\2\0\1\101\1\223\1\0\1\223"+
    "\1\0\3\101\4\0\2\101\1\0\14\101\7\0\1\343"+
    "\1\0\1\343\33\0\1\343\5\0\1\343\41\0\1\4"+
    "\6\5\1\0\12\5\1\u011a\4\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\14\5\4\0\1\4"+
    "\6\5\1\0\5\5\1\u011b\11\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\14\5\4\0\1\4"+
    "\6\5\1\0\7\5\1\u011c\7\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\14\5\4\0\1\4"+
    "\6\5\1\0\13\5\1\u011d\3\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\14\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\237\1\0\14\5\4\0\1\4\6\5"+
    "\1\0\12\5\1\u011e\4\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\14\5\4\0\1\4\6\5"+
    "\1\0\3\5\1\174\13\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\14\5\4\0\1\4\6\5"+
    "\1\0\7\5\1\364\7\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\14\5\4\0\1\4\6\5"+
    "\1\0\1\5\1\273\15\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\14\5\4\0\1\4\1\5"+
    "\1\352\4\5\1\0\10\5\1\u011f\6\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\4\5\1\u0120\12\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\11\5\1\364\5\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\11\5\1\u0121\5\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\6\5\1\u0122\10\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\122\1\0\14\5\4\0\1\4"+
    "\6\5\1\0\3\5\1\u0123\13\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\14\5\4\0\1\4"+
    "\6\5\1\0\14\5\1\u0124\2\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\14\5\4\0\3\261"+
    "\4\145\1\261\3\145\6\261\1\145\2\261\1\145\6\261"+
    "\1\147\5\261\1\145\1\261\1\0\2\261\2\145\5\261"+
    "\1\145\21\261\1\145\11\261\3\152\4\37\1\152\3\37"+
    "\6\152\1\37\2\152\1\37\13\152\1\271\1\37\2\152"+
    "\1\272\1\152\2\37\5\152\1\37\21\152\1\37\11\152"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\1\5\1\122\12\5\4\0"+
    "\7\101\1\0\12\101\1\u0125\4\101\11\0\3\101\2\0"+
    "\3\101\2\0\1\u0125\1\101\1\0\1\101\1\0\3\101"+
    "\4\0\2\101\1\0\14\101\4\0\7\101\1\0\5\101"+
    "\1\u0125\11\101\11\0\3\101\2\0\3\101\2\0\1\101"+
    "\1\u0125\1\0\1\101\1\0\3\101\4\0\2\101\1\0"+
    "\14\101\4\0\7\4\1\0\3\4\1\375\13\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\14\4\4\0\7\4\1\0"+
    "\2\4\1\u0126\14\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\14\4\4\0\7\4\1\0\1\4\1\u0126\15\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\14\4\4\0\7\4\1\0"+
    "\10\4\1\u0127\6\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\14\4\4\0\7\4\1\0\1\4\1\375\15\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\14\4\4\0\7\4\1\0"+
    "\5\4\1\u0128\11\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\14\4\4\0\7\4\1\0\15\4\1\u0129\1\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\14\4\16\0\1\313\106\0"+
    "\1\u012a\113\0\1\u012b\2\0\1\u012c\111\0\1\u012d\101\0"+
    "\1\u012e\3\0\1\u010a\115\0\1\u012f\103\0\1\u012c\104\0"+
    "\1\u012e\124\0\1\u0130\64\0\1\4\6\5\1\0\7\5"+
    "\1\u0131\7\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\14\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\u0132"+
    "\1\0\14\5\4\0\1\4\6\5\1\0\1\5\1\345"+
    "\15\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\14\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\u010e\1\0"+
    "\14\5\4\0\1\4\6\5\1\0\1\345\16\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\14\5"+
    "\4\0\1\4\6\5\1\0\14\5\1\u0133\2\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\14\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\u0134\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\14\5\4\0\1\4"+
    "\6\5\1\0\1\5\1\u0135\15\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\14\5\36\0\1\u0136"+
    "\74\0\1\334\51\0\1\u0114\21\0\1\u0116\1\u0137\4\u0116"+
    "\1\u0137\17\u0116\3\u0137\1\u0116\1\u0137\2\0\2\u0137\1\0"+
    "\2\u0116\2\0\3\u0116\1\0\1\u0137\2\u0116\1\u0137\1\u0116"+
    "\1\0\1\u0137\1\u0116\5\u0137\2\u0116\1\u0137\14\u0116\1\0"+
    "\1\u0137\34\0\1\u0138\74\0\1\340\51\0\1\u0117\21\0"+
    "\1\u0119\1\u0139\4\u0119\1\u0139\17\u0119\3\u0139\1\u0119\1\u0139"+
    "\2\0\2\u0139\1\0\2\u0119\2\0\3\u0119\1\0\1\u0139"+
    "\2\u0119\1\u0139\1\u0119\1\0\1\u0139\1\u0119\5\u0139\2\u0119"+
    "\1\u0139\14\u0119\1\0\1\u0139\2\0\1\4\6\5\1\0"+
    "\5\5\1\364\11\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\1\5\1\237\15\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\4\5\1\122\12\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\14\5\1\u013a\2\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\1\u011b\16\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\14\5\4\0\1\4\6\5\1\0\2\5"+
    "\1\122\14\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\14\5\4\0\1\4\6\5\1\0\15\5"+
    "\1\u013b\1\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\14\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\122\1\5"+
    "\1\0\14\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\u013c\1\0"+
    "\14\5\4\0\1\4\6\5\1\0\4\5\1\u013d\12\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\14\5\4\0\1\4\6\5\1\0\15\5\1\230\1\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\14\5\4\0\7\4\1\0\7\4\1\u0126\7\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\14\4\4\0\7\4\1\0"+
    "\12\4\1\u013e\4\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\14\4\4\0\7\4\1\0\16\4\1\u013f\11\0\3\4"+
    "\2\0\3\4\2\0\2\4\1\0\1\4\1\0\3\4"+
    "\4\0\2\4\1\0\14\4\17\0\1\u012b\107\0\1\u0140"+
    "\107\0\1\u0140\117\0\1\u0141\101\0\1\u012b\114\0\1\u0142"+
    "\120\0\1\u0143\63\0\1\4\1\5\1\352\4\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\14\5\4\0\1\4\6\5\1\0\2\5\1\345"+
    "\2\5\1\331\11\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\11\5\1\u010e\5\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\3\5\1\u0144\13\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\14\5\1\u0145\2\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\14\5\36\0\1\u0116\110\0\1\u0119"+
    "\56\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\u0146\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\1\5\1\116\15\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\14\5\4\0"+
    "\1\4\6\5\1\0\12\5\1\230\4\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\14\5\4\0"+
    "\7\4\1\0\1\376\16\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\2\4"+
    "\1\0\14\4\4\0\7\4\1\0\14\4\1\u0126\2\4"+
    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\14\4\23\0\1\u0140"+
    "\113\0\1\u0147\114\0\1\u0148\62\0\1\4\6\5\1\0"+
    "\5\5\1\u010e\11\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\14\5\4\0\1\4\6\5\1\0"+
    "\1\u0149\16\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\14\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\135\1\5"+
    "\1\0\14\5\14\0\1\u012c\124\0\1\u0140\64\0\1\4"+
    "\6\5\1\0\1\5\1\u014a\15\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\14\5\4\0\1\4"+
    "\6\5\1\0\7\5\1\345\7\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\14\5\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22119];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\23\1\1\11\6\1\1\11\6\1\1\11\1\1"+
    "\2\11\17\1\1\11\5\1\1\11\43\1\1\0\2\11"+
    "\2\1\1\11\3\1\1\11\12\1\1\0\17\1\2\0"+
    "\1\11\6\0\1\1\1\0\41\1\1\11\7\1\1\11"+
    "\15\1\6\0\15\1\10\0\1\1\1\0\36\1\4\0"+
    "\1\1\4\0\10\1\2\0\1\1\2\0\21\1\7\0"+
    "\5\1\4\0\6\1\1\11\3\0\3\1\2\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;


  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public GoTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *                    <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
	//	zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GoTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public GoTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }





  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24: 
          { addToken(Token.PREPROCESSOR);
          }
        case 31: break;
        case 7: 
          { addNullToken(); return firstToken;
          }
        case 32: break;
        case 25: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 33: break;
        case 22: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 34: break;
        case 18: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 35: break;
        case 9: 
          { addToken(Token.WHITESPACE);
          }
        case 36: break;
        case 27: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 37: break;
        case 19: 
          { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
          }
        case 38: break;
        case 26: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 39: break;
        case 14: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 40: break;
        case 15: 
          { addToken(Token.RESERVED_WORD);
          }
        case 41: break;
        case 5: 
          { addToken(Token.SEPARATOR);
          }
        case 42: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 43: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 44: break;
        case 17: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 45: break;
        case 28: 
          { addToken(Token.FUNCTION);
          }
        case 46: break;
        case 6: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 47: break;
        case 8: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 48: break;
        case 23: 
          { addToken(Token.DATA_TYPE);
          }
        case 49: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 50: break;
        case 20: 
          { addToken(Token.ERROR_CHAR);
          }
        case 51: break;
        case 21: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 52: break;
        case 30: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 53: break;
        case 29: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 54: break;
        case 16: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 55: break;
        case 13: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 56: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 57: break;
        case 4: 
          { addToken(Token.OPERATOR);
          }
        case 58: break;
        case 10: 
          { 
          }
        case 59: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 60: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 331: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 332: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 333: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
