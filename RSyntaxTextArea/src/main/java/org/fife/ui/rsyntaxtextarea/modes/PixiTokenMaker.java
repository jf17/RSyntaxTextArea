/* The following code was generated by JFlex 1.4.1 on 27.12.18 14:47 */

/*
 * 27/12/2018
 *
 * PixiTokenMaker.java - An object that can take a chunk of text and
 * return a linked list of tokens representing it in the C programming
 * language.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for the Pixi programming language.
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>CTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.6
 *
 */

public class PixiTokenMaker extends AbstractJFlexPixiTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\50\1\43\1\0\1\50\1\56\22\0\1\50\1\36\1\44"+
    "\1\57\1\60\1\65\1\122\1\33\1\31\1\31\1\51\1\7\1\64"+
    "\1\37\1\54\1\32\1\47\3\41\4\5\2\3\1\70\1\63\1\34"+
    "\1\30\1\35\1\27\1\61\1\106\1\105\1\107\1\4\1\6\1\55"+
    "\1\100\1\101\1\77\1\1\1\110\1\53\1\116\1\115\1\103\1\104"+
    "\1\114\1\76\1\117\1\102\1\52\1\113\1\112\1\42\1\111\1\120"+
    "\1\62\1\40\1\62\1\124\1\2\1\0\1\24\1\46\1\21\1\10"+
    "\1\11\1\12\1\25\1\66\1\13\1\1\1\72\1\15\1\26\1\14"+
    "\1\20\1\23\1\1\1\17\1\16\1\67\1\22\1\45\1\71\1\73"+
    "\1\75\1\74\1\121\1\123\1\121\1\64\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\2\1\4\15\2\2\4"+
    "\1\5\1\4\1\6\3\4\1\2\1\7\1\10\2\2"+
    "\1\3\1\11\1\2\1\4\1\2\2\1\1\2\1\4"+
    "\7\2\2\4\2\12\1\13\5\12\1\14\2\12\2\15"+
    "\2\3\1\16\3\2\1\17\3\2\1\20\3\2\1\17"+
    "\24\2\1\0\1\21\1\22\2\23\1\24\1\6\2\10"+
    "\1\25\3\2\1\15\3\2\6\1\1\0\13\2\2\0"+
    "\1\26\6\0\1\3\1\0\1\3\1\15\1\16\11\2"+
    "\1\27\1\30\16\2\1\20\11\2\1\6\1\31\1\6"+
    "\3\23\1\6\2\10\1\32\3\2\1\33\3\2\4\1"+
    "\1\34\4\1\6\0\5\2\1\34\5\2\10\0\1\16"+
    "\1\0\31\2\1\6\1\10\2\2\2\33\1\2\7\1"+
    "\4\0\1\34\4\0\10\2\2\0\1\35\2\0\1\36"+
    "\20\2\1\33\1\2\1\34\3\1\7\0\5\2\4\0"+
    "\10\2\2\1\1\34\3\0\4\2\2\0\10\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\125\0\252\0\377\0\u0154\0\u01a9\0\u01fe\0\u0253"+
    "\0\u02a8\0\u02fd\0\u0352\0\u03a7\0\u03fc\0\u0451\0\u04a6\0\u04fb"+
    "\0\u0550\0\u05a5\0\u05fa\0\u064f\0\u06a4\0\u06f9\0\u074e\0\u07a3"+
    "\0\u07f8\0\u084d\0\u08a2\0\u08f7\0\u094c\0\377\0\u07a3\0\u09a1"+
    "\0\u09f6\0\u0a4b\0\u0aa0\0\u0af5\0\u0b4a\0\u0b9f\0\u0bf4\0\u07a3"+
    "\0\u0c49\0\u07a3\0\u07a3\0\u0c9e\0\u0cf3\0\u0d48\0\u0d9d\0\u0df2"+
    "\0\u0e47\0\u0e9c\0\u0ef1\0\u0f46\0\u0f9b\0\u0ff0\0\u07a3\0\u1045"+
    "\0\u109a\0\u10ef\0\u1144\0\u1199\0\u07a3\0\u11ee\0\u1243\0\u1298"+
    "\0\u12ed\0\u1342\0\u1397\0\u13ec\0\u1441\0\u1496\0\u14eb\0\u1540"+
    "\0\u1595\0\u15ea\0\u163f\0\u0154\0\u1694\0\u16e9\0\u173e\0\u0154"+
    "\0\u1793\0\u17e8\0\u183d\0\u1892\0\u18e7\0\u193c\0\u1991\0\u19e6"+
    "\0\u1a3b\0\u1a90\0\u1ae5\0\u1b3a\0\u1b8f\0\u1be4\0\u1c39\0\u1c8e"+
    "\0\u1ce3\0\u1d38\0\u1d8d\0\u1de2\0\u1e37\0\u07a3\0\u07a3\0\u1e8c"+
    "\0\u1ee1\0\u07a3\0\u1f36\0\u1f8b\0\u1fe0\0\u07a3\0\u2035\0\u208a"+
    "\0\u20df\0\u2134\0\u2189\0\u21de\0\u2233\0\u2288\0\u22dd\0\u2332"+
    "\0\u2387\0\u23dc\0\u2431\0\u2486\0\u24db\0\u2530\0\u2585\0\u25da"+
    "\0\u262f\0\u2684\0\u26d9\0\u272e\0\u2783\0\u27d8\0\u282d\0\u2882"+
    "\0\u28d7\0\u07a3\0\u292c\0\u2981\0\u29d6\0\u2a2b\0\u2a80\0\u2ad5"+
    "\0\u2b2a\0\u2b7f\0\u1298\0\u2bd4\0\u1298\0\u2c29\0\u2c7e\0\u2cd3"+
    "\0\u2d28\0\u2d7d\0\u2dd2\0\u2e27\0\u2e7c\0\u2ed1\0\u0154\0\u0154"+
    "\0\u2f26\0\u2f7b\0\u2fd0\0\u3025\0\u307a\0\u30cf\0\u3124\0\u3179"+
    "\0\u31ce\0\u3223\0\u3278\0\u32cd\0\u3322\0\u3377\0\u33cc\0\u3421"+
    "\0\u3476\0\u34cb\0\u3520\0\u3575\0\u35ca\0\u361f\0\u3674\0\u36c9"+
    "\0\u371e\0\u07a3\0\u3773\0\u37c8\0\u381d\0\u3872\0\u38c7\0\u391c"+
    "\0\u3971\0\u07a3\0\u39c6\0\u3a1b\0\u3a70\0\u3ac5\0\u3b1a\0\u3b6f"+
    "\0\u3bc4\0\u3c19\0\u3c6e\0\u3cc3\0\u3d18\0\u3d6d\0\u3dc2\0\u3e17"+
    "\0\u3e6c\0\u3ec1\0\u3f16\0\u3f6b\0\u3fc0\0\u4015\0\u406a\0\u40bf"+
    "\0\u4114\0\u4169\0\u41be\0\u4213\0\u4268\0\u0154\0\u42bd\0\u4312"+
    "\0\u4367\0\u43bc\0\u4411\0\u4466\0\u44bb\0\u4510\0\u4565\0\u45ba"+
    "\0\u460f\0\u4664\0\u46b9\0\u470e\0\u4763\0\u47b8\0\u480d\0\u4862"+
    "\0\u48b7\0\u490c\0\u4961\0\u49b6\0\u4a0b\0\u4a60\0\u4ab5\0\u4b0a"+
    "\0\u4b5f\0\u4bb4\0\u4c09\0\u4c5e\0\u4cb3\0\u4d08\0\u4d5d\0\u4db2"+
    "\0\u4e07\0\u4e5c\0\u4eb1\0\u4f06\0\u4f5b\0\u4fb0\0\u5005\0\u505a"+
    "\0\u50af\0\u5104\0\u5159\0\u51ae\0\u5203\0\u5258\0\u52ad\0\u5302"+
    "\0\u5357\0\u53ac\0\u5401\0\u5456\0\u54ab\0\u5500\0\u5555\0\u55aa"+
    "\0\u55ff\0\u5654\0\u56a9\0\u56fe\0\u5753\0\u57a8\0\u57fd\0\u5852"+
    "\0\u58a7\0\u58fc\0\u5951\0\u59a6\0\u59fb\0\u5a50\0\u5aa5\0\u5afa"+
    "\0\u5b4f\0\u5ba4\0\u5bf9\0\u5c4e\0\u5ca3\0\u5cf8\0\u5d4d\0\u5da2"+
    "\0\u5df7\0\u5e4c\0\u5ea1\0\u5ef6\0\u5f4b\0\u5fa0\0\u5ff5\0\u604a"+
    "\0\u609f\0\u60f4\0\u6149\0\u1298\0\u619e\0\377\0\u61f3\0\u6248"+
    "\0\u629d\0\u62f2\0\u6347\0\u639c\0\u63f1\0\u6446\0\u649b\0\u64f0"+
    "\0\u6545\0\u659a\0\u65ef\0\u6644\0\u6699\0\u66ee\0\u5afa\0\u6743"+
    "\0\u5bf9\0\u6798\0\u67ed\0\u6842\0\u6897\0\u68ec\0\u6941\0\u6996"+
    "\0\u69eb\0\u6a40\0\u6a95\0\u07a3\0\u6aea\0\u6b3f\0\u6b94\0\u6be9"+
    "\0\u6c3e\0\u6c93\0\u6ce8\0\u6d3d\0\u6d92\0\u6de7\0\u6e3c\0\u6e91"+
    "\0\u6ee6\0\u6f3b\0\u6f90\0\u6fe5\0\u703a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\5"+
    "\1\21\1\22\1\23\1\24\1\25\1\5\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\27\1\35\1\36"+
    "\1\6\1\5\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\27\1\5\1\45\1\46\1\47\1\50\1\51\2\4"+
    "\1\30\1\52\1\53\1\27\1\5\1\54\1\53\1\55"+
    "\4\5\1\56\3\5\1\57\2\5\1\60\3\5\1\61"+
    "\1\62\6\5\1\30\1\63\1\64\1\27\12\65\1\66"+
    "\30\65\1\67\5\65\1\70\14\65\1\71\2\65\1\72"+
    "\33\65\12\73\1\74\30\73\1\75\22\73\1\76\2\73"+
    "\1\77\33\73\7\4\1\0\17\4\11\0\3\4\2\0"+
    "\3\4\2\0\2\4\1\0\1\4\1\0\3\4\4\0"+
    "\2\4\1\0\30\4\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\3\100\1\6\1\100\1\6\1\101\1\0"+
    "\1\100\1\101\3\100\1\102\4\100\1\103\4\100\11\0"+
    "\1\100\1\6\1\100\2\0\2\100\1\6\2\0\1\103"+
    "\1\102\1\104\1\100\1\0\3\100\4\0\2\100\1\0"+
    "\30\100\4\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\22\5\1\105"+
    "\5\5\13\0\1\53\20\0\1\53\74\0\1\4\6\5"+
    "\1\0\1\5\1\106\5\5\1\107\1\110\6\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\4\5\1\111\1\112\11\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\2\5\1\113\25\5\4\0\1\4\6\5\1\0\4\5"+
    "\1\114\1\115\2\5\1\116\6\5\11\0\1\4\2\5"+
    "\2\0\1\5\1\117\1\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\2\5\1\120\1\5\1\121"+
    "\12\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\1\5\1\122"+
    "\15\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\1\123\7\5"+
    "\1\124\6\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\1\5"+
    "\1\125\1\5\1\126\7\5\1\127\1\130\2\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\131\1\132\1\0"+
    "\1\133\27\5\4\0\1\4\6\5\1\0\1\5\1\134"+
    "\15\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\5\5\1\135"+
    "\2\5\1\136\3\5\1\112\2\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\137\1\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\4\5\1\140\12\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\7\5\1\141\7\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\12\5\1\142\4\5\11\0\1\4"+
    "\2\5\2\0\1\5\1\143\1\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\1\5\1\144\6\5"+
    "\1\142\6\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\33\0\1\145\125\0\1\53\251\0"+
    "\1\53\1\0\1\146\16\0\1\147\53\0\27\150\1\151"+
    "\3\150\1\152\4\150\1\153\2\150\1\0\61\150\30\0"+
    "\1\53\3\0\1\27\120\0\1\53\4\0\1\27\117\0"+
    "\1\53\6\0\1\53\65\0\40\40\1\154\2\40\1\155"+
    "\1\156\60\40\1\4\6\5\1\0\10\5\1\157\6\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\7\5\1\160\1\161"+
    "\6\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\3\100\1\6\1\100\1\6\1\101"+
    "\1\0\1\100\1\101\3\100\1\102\4\100\1\103\4\100"+
    "\11\0\1\100\1\6\1\162\2\0\2\100\1\6\2\0"+
    "\1\103\1\102\1\104\1\100\1\0\3\100\4\0\2\100"+
    "\1\0\2\100\1\162\25\100\54\0\1\44\54\0\1\4"+
    "\5\5\1\163\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\15\5\1\164\12\5\7\0"+
    "\1\104\1\0\1\104\33\0\1\104\5\0\1\104\55\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\1\5\1\165\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\7\4"+
    "\1\0\1\166\1\167\1\4\1\170\1\4\1\171\4\4"+
    "\1\172\1\173\3\4\11\0\3\4\2\0\3\4\1\174"+
    "\1\0\2\4\1\0\1\4\1\0\3\4\4\0\2\4"+
    "\1\0\30\4\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\4\5"+
    "\1\175\23\5\4\0\1\4\6\5\1\0\6\5\1\176"+
    "\2\5\1\177\5\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\200\1\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\6\5\1\201\21\5\4\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\12\5\1\202\15\5\4\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\1\5\1\203\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\12\5\1\204\15\5\4\0\1\4"+
    "\5\5\1\205\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\6\5\1\206\1\5\1\207\17\5\34\0"+
    "\1\53\71\0\1\53\32\0\1\53\72\0\1\53\1\0"+
    "\12\65\1\0\30\65\1\0\5\65\1\0\14\65\1\0"+
    "\2\65\1\0\33\65\13\0\1\210\53\0\1\211\67\0"+
    "\1\212\161\0\1\213\126\0\1\214\33\0\12\73\1\0"+
    "\30\73\1\0\22\73\1\0\2\73\1\0\33\73\13\0"+
    "\1\215\53\0\1\216\124\0\1\217\126\0\1\220\33\0"+
    "\7\100\1\0\17\100\11\0\3\100\2\0\3\100\2\0"+
    "\2\100\1\0\1\100\1\0\3\100\4\0\2\100\1\0"+
    "\30\100\4\0\3\100\1\221\1\100\1\221\1\100\1\222"+
    "\17\100\10\0\1\222\1\100\1\221\1\100\2\0\2\100"+
    "\1\221\2\0\2\100\1\0\1\100\1\0\3\100\4\0"+
    "\2\100\1\0\30\100\4\0\7\100\1\0\12\100\1\223"+
    "\4\100\11\0\3\100\2\0\3\100\2\0\1\223\1\100"+
    "\1\0\1\100\1\0\3\100\4\0\2\100\1\0\30\100"+
    "\4\0\7\100\1\0\5\100\1\223\11\100\11\0\3\100"+
    "\2\0\3\100\2\0\1\100\1\223\1\0\1\100\1\0"+
    "\3\100\4\0\2\100\1\0\30\100\4\0\3\100\1\104"+
    "\1\100\1\104\1\224\1\0\1\100\1\224\1\225\2\100"+
    "\1\225\11\100\11\0\1\100\1\104\1\100\2\0\2\100"+
    "\1\104\2\0\1\100\1\225\1\0\1\225\1\0\3\100"+
    "\4\0\2\100\1\0\30\100\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\11\5\1\226\16\5\4\0\1\4\6\5\1\0"+
    "\2\5\1\227\14\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\14\5\1\230\2\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\12\5\1\231\4\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\12\5\1\232\4\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\6\5\1\233\10\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\234\1\0\30\5\4\0\1\4\6\5\1\0\10\5"+
    "\1\235\6\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\7\5"+
    "\1\120\7\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\10\5"+
    "\1\161\6\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\11\5"+
    "\1\236\5\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\237\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\1\240\27\5\4\0\1\4\6\5\1\0\3\5"+
    "\1\241\13\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\4\5"+
    "\1\242\7\5\1\243\2\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\244\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\15\5\1\245\1\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\3\5\1\246\24\5\4\0\1\4"+
    "\6\5\1\0\7\5\1\247\7\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\1\250"+
    "\2\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\10\5\1\251\6\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\7\5\1\252\4\5\1\253\2\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\3\5\1\254\13\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\6\5\1\255\6\5\1\256\1\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\257"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\1\5\1\260"+
    "\15\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\4\5\1\261"+
    "\12\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\14\5\1\262"+
    "\2\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\3\5\1\263"+
    "\2\5\1\264\10\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\3\5\1\265\13\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\266\1\0\30\5\4\0\1\4\6\5\1\0\6\5"+
    "\1\240\1\5\1\267\6\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\270\1\0\30\5\34\0\10\53\65\0\33\271"+
    "\1\272\7\271\1\0\110\271\1\273\3\271\1\272\7\271"+
    "\1\0\66\271\1\274\3\271\2\150\1\271\1\150\2\271"+
    "\1\150\4\271\1\150\2\271\1\150\3\271\1\275\4\271"+
    "\1\150\1\276\1\277\1\0\3\150\1\276\17\271\1\150"+
    "\3\271\1\277\31\271\5\155\1\40\3\155\2\40\1\155"+
    "\1\40\2\155\1\40\4\155\1\40\2\155\1\40\3\155"+
    "\1\40\4\155\2\40\1\300\1\0\4\40\17\155\1\40"+
    "\3\155\1\300\71\155\1\301\3\155\1\302\60\155\1\4"+
    "\6\5\1\0\3\5\1\303\1\5\1\304\11\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\1\5\1\305\15\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\2\5\1\240\25\5"+
    "\4\0\3\100\4\306\1\0\3\306\6\100\1\306\2\100"+
    "\1\306\2\100\11\0\1\100\1\306\1\100\2\0\1\100"+
    "\2\306\2\0\2\100\1\0\1\306\1\0\3\100\4\0"+
    "\2\100\1\0\14\100\3\306\11\100\4\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\307\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\24\5\1\310\3\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\12\5\1\311\15\5\4\0\7\4\1\0\1\4\1\312"+
    "\15\4\11\0\3\4\2\0\3\4\2\0\2\4\1\0"+
    "\1\4\1\0\3\4\4\0\2\4\1\0\30\4\4\0"+
    "\7\4\1\0\4\4\1\313\1\314\1\4\1\315\7\4"+
    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\30\4\4\0\7\4"+
    "\1\0\2\4\1\316\1\4\1\317\12\4\11\0\3\4"+
    "\2\0\3\4\2\0\2\4\1\0\1\4\1\0\3\4"+
    "\4\0\2\4\1\0\30\4\4\0\7\4\1\0\3\4"+
    "\1\320\13\4\11\0\3\4\2\0\3\4\2\0\2\4"+
    "\1\0\1\4\1\0\3\4\4\0\2\4\1\0\30\4"+
    "\4\0\7\4\1\0\4\4\1\321\12\4\11\0\3\4"+
    "\2\0\3\4\2\0\2\4\1\0\1\4\1\0\3\4"+
    "\4\0\2\4\1\0\30\4\4\0\7\4\1\0\7\4"+
    "\1\322\7\4\11\0\3\4\2\0\3\4\2\0\2\4"+
    "\1\0\1\4\1\0\3\4\4\0\2\4\1\0\30\4"+
    "\14\0\1\323\1\324\1\0\1\325\1\0\1\326\4\0"+
    "\1\327\1\330\24\0\1\174\54\0\1\4\6\5\1\0"+
    "\13\5\1\331\3\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\11\5\1\332\5\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\333"+
    "\1\5\1\0\30\5\4\0\1\4\6\5\1\0\3\5"+
    "\1\334\13\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\7\5\1\335\20\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\13\5\1\336\14\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\15\5\1\337\12\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\11\5\1\340\16\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\1\5\1\341"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\24\5"+
    "\1\342\3\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\6\5"+
    "\1\343\21\5\21\0\1\344\132\0\1\345\170\0\1\346"+
    "\126\0\1\347\50\0\1\350\132\0\1\351\170\0\1\352"+
    "\126\0\1\353\33\0\3\100\1\221\1\100\1\221\1\100"+
    "\1\0\5\100\1\102\4\100\1\103\4\100\11\0\1\100"+
    "\1\221\1\100\2\0\2\100\1\221\2\0\1\103\1\102"+
    "\1\0\1\100\1\0\3\100\4\0\2\100\1\0\30\100"+
    "\7\0\1\221\1\0\1\221\33\0\1\221\5\0\1\221"+
    "\55\0\3\100\1\354\1\100\1\354\1\100\1\355\17\100"+
    "\10\0\1\355\1\100\1\354\1\100\2\0\2\100\1\354"+
    "\2\0\2\100\1\0\1\100\1\0\3\100\4\0\2\100"+
    "\1\0\30\100\4\0\1\4\1\5\1\356\4\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\14\5\1\357"+
    "\2\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\1\360"+
    "\27\5\4\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\1\5\1\361\1\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\16\5\1\120\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\1\5\1\120\15\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\1\5\1\362\15\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\14\5\1\363\2\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\5\5\1\364\11\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\1\365\2\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\15\5\1\237\1\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\1\240\16\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\1\5\1\366\4\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\4\5\1\367\12\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\1\5\1\370\15\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\3\5\1\371\13\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\1\5\1\240\15\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\7\5\1\363\7\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\12\5\1\372\4\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\373\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\374\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\3\5\1\375\13\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\3\5\1\376\13\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\12\5\1\377\4\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\14\5\1\u0100\2\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\6\5\1\u0101\10\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\u0102\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\7\5\1\237\7\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\10\5\1\u0103\6\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\3\5\1\u0104\13\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\4\5\1\u0105\12\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\10\5\1\120\6\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\7\5\1\u0105\7\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\1\5"+
    "\1\u0106\4\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\33\271\1\152"+
    "\7\271\1\0\111\271\3\150\1\275\4\150\3\271\1\0"+
    "\66\271\1\150\25\271\1\272\5\271\1\150\1\271\1\0"+
    "\3\271\1\150\55\271\33\0\1\272\71\0\5\271\1\274"+
    "\25\271\1\272\5\271\1\274\1\271\1\0\3\271\1\274"+
    "\60\271\4\u0107\1\271\3\u0107\6\271\1\u0107\2\271\1\u0107"+
    "\6\271\1\152\5\271\1\u0107\1\271\1\0\2\271\2\u0107"+
    "\5\271\1\u0107\27\271\3\u0107\15\271\3\155\4\u0108\1\155"+
    "\3\u0108\6\155\1\u0108\2\155\1\u0108\13\155\1\301\1\u0108"+
    "\2\155\1\302\1\155\2\u0108\5\155\1\u0108\27\155\3\u0108"+
    "\60\155\1\0\61\155\1\4\6\5\1\0\1\237\16\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\14\5\1\u0109\2\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\14\5\1\u010a\2\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\3\100\4\306\1\0\3\306\2\100\1\u010b"+
    "\3\100\1\306\1\u010c\1\100\1\306\2\100\11\0\1\100"+
    "\1\306\1\100\2\0\1\100\2\306\2\0\1\u010c\1\u010b"+
    "\1\0\1\306\1\0\3\100\4\0\2\100\1\0\14\100"+
    "\3\306\11\100\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\11\5"+
    "\1\336\16\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\7\5"+
    "\1\u010d\20\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\15\5"+
    "\1\307\12\5\4\0\7\4\1\0\2\4\1\171\14\4"+
    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\30\4\4\0\7\4"+
    "\1\0\1\u010e\16\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\30\4\4\0\7\4\1\0\3\4\1\u010f\2\4\1\u0110"+
    "\10\4\11\0\3\4\2\0\3\4\2\0\2\4\1\0"+
    "\1\4\1\0\3\4\4\0\2\4\1\0\30\4\4\0"+
    "\7\4\1\0\7\4\1\u0111\7\4\11\0\3\4\2\0"+
    "\3\4\2\0\2\4\1\0\1\4\1\0\3\4\4\0"+
    "\2\4\1\0\30\4\4\0\7\4\1\0\1\u0112\3\4"+
    "\1\321\12\4\11\0\3\4\2\0\3\4\2\0\2\4"+
    "\1\0\1\4\1\0\3\4\4\0\2\4\1\0\30\4"+
    "\4\0\7\4\1\0\11\4\1\u0113\5\4\11\0\3\4"+
    "\2\0\3\4\2\0\2\4\1\0\1\4\1\0\3\4"+
    "\4\0\2\4\1\0\30\4\4\0\7\4\1\0\4\4"+
    "\1\u0110\12\4\11\0\3\4\2\0\3\4\2\0\2\4"+
    "\1\0\1\4\1\0\3\4\4\0\2\4\1\0\30\4"+
    "\4\0\7\4\1\0\1\u0112\16\4\11\0\3\4\2\0"+
    "\3\4\2\0\2\4\1\0\1\4\1\0\3\4\4\0"+
    "\2\4\1\0\30\4\4\0\7\4\1\0\14\4\1\u0114"+
    "\2\4\11\0\3\4\2\0\3\4\2\0\2\4\1\0"+
    "\1\4\1\0\3\4\4\0\2\4\1\0\30\4\15\0"+
    "\1\u0115\127\0\1\u0116\1\u0117\1\0\1\u0118\117\0\1\u0119"+
    "\1\0\1\u011a\123\0\1\u011b\125\0\1\u011c\127\0\1\u011d"+
    "\105\0\1\4\6\5\1\0\1\5\1\u011e\15\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\14\5\1\u011f\2\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\14\5\1\u0120\2\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\5\5\1\233\11\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\10\5\1\307\17\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\16\5\1\u0121\11\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\11\5\1\u0122\16\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\1\5\1\u0123\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\3\5\1\u0124\2\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\11\5\1\u0125\16\5\15\0"+
    "\1\345\203\0\1\u0126\57\0\1\u0127\155\0\1\u0128\61\0"+
    "\1\351\203\0\1\u0129\57\0\1\u012a\155\0\1\u012b\50\0"+
    "\3\100\1\354\1\100\1\354\1\100\1\0\2\100\1\225"+
    "\2\100\1\225\11\100\11\0\1\100\1\354\1\100\2\0"+
    "\2\100\1\354\2\0\1\100\1\225\1\0\1\225\1\0"+
    "\3\100\4\0\2\100\1\0\30\100\7\0\1\354\1\0"+
    "\1\354\33\0\1\354\5\0\1\354\55\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\11\5\1\u012c\11\5\1\u012d\4\5\4\0"+
    "\1\4\6\5\1\0\12\5\1\u012e\4\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\1\5\1\u012f\4\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\5\5\1\u0130\11\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\7\5\1\u0103\7\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\237\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\12\5\1\u0131\4\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\1\5\1\363\4\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\13\5\1\u0132\3\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\1\5\1\303\15\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\1\5\1\363\4\5\1\0\10\5\1\u0133\6\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\4\5\1\u0134\12\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\11\5\1\u0101\5\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\3\5\1\u0135\13\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\11\5\1\u0136\5\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\3\5\1\250\24\5"+
    "\4\0\1\4\6\5\1\0\6\5\1\u0137\10\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\7\5\1\u0138\7\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\7\5\1\240\7\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\120\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\3\5\1\u0139\13\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\4\5\1\120\12\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\15\5\1\245\1\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\240\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\6\5\1\u013a\10\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\2\5\1\u013b\1\5"+
    "\1\u013b\23\5\4\0\3\271\4\150\1\271\3\150\6\271"+
    "\1\150\2\271\1\150\6\271\1\152\5\271\1\150\1\271"+
    "\1\0\2\271\2\150\5\271\1\150\27\271\3\150\15\271"+
    "\3\155\4\40\1\155\3\40\6\155\1\40\2\155\1\40"+
    "\13\155\1\301\1\40\2\155\1\302\1\155\2\40\5\155"+
    "\1\40\27\155\3\40\15\155\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\200"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\1\5"+
    "\1\120\26\5\4\0\7\100\1\0\12\100\1\u013c\4\100"+
    "\11\0\3\100\2\0\3\100\2\0\1\u013c\1\100\1\0"+
    "\1\100\1\0\3\100\4\0\2\100\1\0\30\100\4\0"+
    "\7\100\1\0\5\100\1\u013c\11\100\11\0\3\100\2\0"+
    "\3\100\2\0\1\100\1\u013c\1\0\1\100\1\0\3\100"+
    "\4\0\2\100\1\0\30\100\4\0\1\4\1\5\1\u013d"+
    "\4\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\7\4\1\0\3\4"+
    "\1\u010f\13\4\11\0\3\4\2\0\3\4\2\0\2\4"+
    "\1\0\1\4\1\0\3\4\4\0\2\4\1\0\30\4"+
    "\4\0\7\4\1\0\2\4\1\u013e\14\4\11\0\3\4"+
    "\2\0\3\4\2\0\2\4\1\0\1\4\1\0\3\4"+
    "\4\0\2\4\1\0\30\4\4\0\7\4\1\0\1\4"+
    "\1\u013e\15\4\11\0\3\4\2\0\3\4\2\0\2\4"+
    "\1\0\1\4\1\0\3\4\4\0\2\4\1\0\30\4"+
    "\4\0\7\4\1\0\10\4\1\u013f\6\4\11\0\3\4"+
    "\2\0\3\4\2\0\2\4\1\0\1\4\1\0\3\4"+
    "\4\0\2\4\1\0\30\4\4\0\7\4\1\0\1\4"+
    "\1\u010f\15\4\11\0\3\4\2\0\3\4\2\0\2\4"+
    "\1\0\1\4\1\0\3\4\4\0\2\4\1\0\30\4"+
    "\4\0\7\4\1\0\5\4\1\u0140\11\4\11\0\3\4"+
    "\2\0\3\4\2\0\2\4\1\0\1\4\1\0\3\4"+
    "\4\0\2\4\1\0\30\4\4\0\7\4\1\0\15\4"+
    "\1\u0141\1\4\11\0\3\4\2\0\3\4\2\0\2\4"+
    "\1\0\1\4\1\0\3\4\4\0\2\4\1\0\30\4"+
    "\16\0\1\326\122\0\1\u0142\127\0\1\u0143\2\0\1\u0144"+
    "\125\0\1\u0145\115\0\1\u0146\3\0\1\u011c\131\0\1\u0147"+
    "\117\0\1\u0144\120\0\1\u0146\140\0\1\u0148\100\0\1\4"+
    "\6\5\1\0\1\u0149\16\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\4\5\1\u014a\12\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\7\5\1\365\7\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\17\5\1\336\10\5\4\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\12\5\1\u014b\15\5\4\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\12\5\1\u014c\15\5\4\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\12\5\1\u014d\15\5\4\0\1\4\5\5"+
    "\1\336\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\36\0\1\u014e\110\0\1\345"+
    "\51\0\1\u0126\35\0\1\u0128\1\u014f\4\u0128\1\u014f\17\u0128"+
    "\3\u014f\1\u0128\1\u014f\2\0\2\u014f\1\0\2\u0128\2\0"+
    "\3\u0128\1\0\1\u014f\2\u0128\1\u014f\1\u0128\1\0\1\u014f"+
    "\1\u0128\5\u014f\2\u0128\1\u014f\30\u0128\1\0\1\u014f\34\0"+
    "\1\u0150\110\0\1\351\51\0\1\u0129\35\0\1\u012b\1\u0151"+
    "\4\u012b\1\u0151\17\u012b\3\u0151\1\u012b\1\u0151\2\0\2\u0151"+
    "\1\0\2\u012b\2\0\3\u012b\1\0\1\u0151\2\u012b\1\u0151"+
    "\1\u012b\1\0\1\u0151\1\u012b\5\u0151\2\u012b\1\u0151\30\u012b"+
    "\1\0\1\u0151\2\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\20\5"+
    "\1\u0152\7\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\1\u0153\1\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\5\5\1\u0101\11\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\13\5\1\u0154\3\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\1\5\1\237\15\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\1\u0130\16\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\3\5\1\u0155\13\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\2\5\1\120\14\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\u014a\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\11\5\1\120\5\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\120\1\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\u0156\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\4\5\1\114\12\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\4\5\1\u0157\12\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\11\5\1\u0158\5\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\6\5\1\255\10\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\24\5\1\u0159\3\5\4\0\7\4\1\0"+
    "\7\4\1\u013e\7\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\30\4\4\0\7\4\1\0\12\4\1\u015a\4\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\30\4\4\0\7\4\1\0"+
    "\16\4\1\u015b\11\0\3\4\2\0\3\4\2\0\2\4"+
    "\1\0\1\4\1\0\3\4\4\0\2\4\1\0\30\4"+
    "\17\0\1\u0143\123\0\1\u015c\123\0\1\u015c\133\0\1\u015d"+
    "\115\0\1\u0143\130\0\1\u015e\134\0\1\u015f\77\0\1\4"+
    "\6\5\1\0\1\5\1\u0133\15\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\2\5\1\240\14\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\25\5\1\336\2\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\21\5\1\336\6\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\21\5\1\u0160\6\5\36\0\1\u0128"+
    "\124\0\1\u012b\72\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\13\5"+
    "\1\u0125\14\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\6\5"+
    "\1\307\21\5\4\0\1\4\6\5\1\0\10\5\1\141"+
    "\6\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\2\5"+
    "\1\u0161\25\5\4\0\1\4\6\5\1\0\1\5\1\116"+
    "\15\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\12\5\1\233"+
    "\4\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\7\5\1\u0162"+
    "\7\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\15\5"+
    "\1\u0163\12\5\4\0\7\4\1\0\1\u0110\16\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\30\4\4\0\7\4\1\0"+
    "\14\4\1\u013e\2\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\30\4\23\0\1\u015c\127\0\1\u0164\130\0\1\u0165\76\0"+
    "\1\4\1\5\1\u0166\4\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\1\5\1\u0167\15\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\1\5\1\u0168\15\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\25\5\1\u0125\2\5\14\0"+
    "\1\u0144\140\0\1\u015c\100\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\1\5\1\u0169\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\20\5\1\u0169\7\5\4\0\1\4\6\5\1\0"+
    "\5\5\1\u016a\11\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\1\5\1\u016b\15\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\26\5\1\u016c\1\5\4\0\1\4\1\5\1\u013b"+
    "\4\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\4\5\1\240\12\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\6\5\1\u016d\21\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\27\5\1\u0125\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28815];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\24\1\1\11\6\1\1\11\10\1\1\11\1\1"+
    "\2\11\13\1\1\11\5\1\1\11\47\1\1\0\2\11"+
    "\2\1\1\11\3\1\1\11\15\1\1\0\13\1\2\0"+
    "\1\11\6\0\1\1\1\0\47\1\1\11\7\1\1\11"+
    "\20\1\6\0\13\1\10\0\1\1\1\0\47\1\4\0"+
    "\1\1\4\0\10\1\2\0\1\1\2\0\27\1\7\0"+
    "\5\1\4\0\12\1\1\11\3\0\4\1\2\0\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public PixiTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *                    <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PixiTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PixiTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


 
    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }





  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 28: 
          { addToken(Token.PREPROCESSOR);
          }
        case 31: break;
        case 7: 
          { addNullToken(); return firstToken;
          }
        case 32: break;
        case 25: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 33: break;
        case 22: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 34: break;
        case 18: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 35: break;
        case 9: 
          { addToken(Token.WHITESPACE);
          }
        case 36: break;
        case 27: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 37: break;
        case 19: 
          { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
          }
        case 38: break;
        case 26: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 39: break;
        case 14: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 40: break;
        case 15: 
          { addToken(Token.RESERVED_WORD);
          }
        case 41: break;
        case 5: 
          { addToken(Token.SEPARATOR);
          }
        case 42: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 43: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 44: break;
        case 17: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 45: break;
        case 24: 
          { addToken(Token.FUNCTION);
          }
        case 46: break;
        case 6: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 47: break;
        case 8: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 48: break;
        case 23: 
          { addToken(Token.DATA_TYPE);
          }
        case 49: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 50: break;
        case 20: 
          { addToken(Token.ERROR_CHAR);
          }
        case 51: break;
        case 21: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 52: break;
        case 30: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 53: break;
        case 29: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 54: break;
        case 16: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 55: break;
        case 13: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 56: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 57: break;
        case 4: 
          { addToken(Token.OPERATOR);
          }
        case 58: break;
        case 10: 
          { 
          }
        case 59: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 60: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 366: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 367: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 368: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
