/* The following code was generated by JFlex 1.4.1 on 27.12.18 15:50 */

/*
 * 27/12/2018
 *
 * PixiTokenMaker.java - An object that can take a chunk of text and
 * return a linked list of tokens representing it in the C programming
 * language.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for the Pixi programming language.
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>CTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.6
 *
 */

public class PixiTokenMaker extends AbstractJFlexPixiTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\50\1\43\1\0\1\50\1\56\22\0\1\50\1\36\1\44"+
    "\1\57\1\60\1\65\1\122\1\33\1\31\1\31\1\51\1\7\1\64"+
    "\1\37\1\54\1\32\1\47\3\41\4\5\2\3\1\70\1\63\1\34"+
    "\1\30\1\35\1\27\1\61\1\106\1\105\1\107\1\4\1\6\1\55"+
    "\1\100\1\101\1\77\1\1\1\110\1\53\1\116\1\115\1\103\1\104"+
    "\1\114\1\76\1\117\1\102\1\52\1\113\1\112\1\42\1\111\1\120"+
    "\1\62\1\40\1\62\1\124\1\2\1\0\1\24\1\46\1\21\1\10"+
    "\1\11\1\12\1\25\1\66\1\13\1\1\1\72\1\15\1\26\1\14"+
    "\1\20\1\23\1\1\1\17\1\16\1\67\1\22\1\45\1\71\1\73"+
    "\1\75\1\74\1\121\1\123\1\121\1\64\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\2\1\4\15\2\2\4"+
    "\1\5\1\4\1\6\3\4\1\2\1\7\1\10\2\2"+
    "\1\3\1\11\1\2\1\4\1\2\2\1\1\2\1\4"+
    "\7\2\2\4\2\12\1\13\5\12\1\14\2\12\2\15"+
    "\2\3\1\16\3\2\1\17\3\2\1\20\4\2\1\17"+
    "\26\2\1\0\1\21\1\22\2\23\1\24\1\6\2\10"+
    "\1\25\3\2\1\15\3\2\6\1\1\0\13\2\2\0"+
    "\1\26\6\0\1\3\1\0\1\3\1\15\1\16\12\2"+
    "\1\27\1\30\17\2\1\20\12\2\1\6\1\31\1\6"+
    "\3\23\1\6\2\10\1\32\3\2\1\33\3\2\4\1"+
    "\1\34\4\1\6\0\5\2\1\34\5\2\10\0\1\16"+
    "\1\0\33\2\1\6\1\10\2\2\2\33\1\2\7\1"+
    "\4\0\1\34\4\0\10\2\2\0\1\35\2\0\1\36"+
    "\21\2\1\33\1\2\1\34\3\1\7\0\5\2\4\0"+
    "\11\2\2\1\1\34\3\0\5\2\2\0\12\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\125\0\252\0\377\0\u0154\0\u01a9\0\u01fe\0\u0253"+
    "\0\u02a8\0\u02fd\0\u0352\0\u03a7\0\u03fc\0\u0451\0\u04a6\0\u04fb"+
    "\0\u0550\0\u05a5\0\u05fa\0\u064f\0\u06a4\0\u06f9\0\u074e\0\u07a3"+
    "\0\u07f8\0\u084d\0\u08a2\0\u08f7\0\u094c\0\377\0\u07a3\0\u09a1"+
    "\0\u09f6\0\u0a4b\0\u0aa0\0\u0af5\0\u0b4a\0\u0b9f\0\u0bf4\0\u07a3"+
    "\0\u0c49\0\u07a3\0\u07a3\0\u0c9e\0\u0cf3\0\u0d48\0\u0d9d\0\u0df2"+
    "\0\u0e47\0\u0e9c\0\u0ef1\0\u0f46\0\u0f9b\0\u0ff0\0\u07a3\0\u1045"+
    "\0\u109a\0\u10ef\0\u1144\0\u1199\0\u07a3\0\u11ee\0\u1243\0\u1298"+
    "\0\u12ed\0\u1342\0\u1397\0\u13ec\0\u1441\0\u1496\0\u14eb\0\u1540"+
    "\0\u1595\0\u15ea\0\u163f\0\u0154\0\u1694\0\u16e9\0\u173e\0\u1793"+
    "\0\u0154\0\u17e8\0\u183d\0\u1892\0\u18e7\0\u193c\0\u1991\0\u19e6"+
    "\0\u1a3b\0\u1a90\0\u1ae5\0\u1b3a\0\u1b8f\0\u1be4\0\u1c39\0\u1c8e"+
    "\0\u1ce3\0\u1d38\0\u1d8d\0\u1de2\0\u1e37\0\u1e8c\0\u1ee1\0\u1f36"+
    "\0\u07a3\0\u07a3\0\u1f8b\0\u1fe0\0\u07a3\0\u2035\0\u208a\0\u20df"+
    "\0\u07a3\0\u2134\0\u2189\0\u21de\0\u2233\0\u2288\0\u22dd\0\u2332"+
    "\0\u2387\0\u23dc\0\u2431\0\u2486\0\u24db\0\u2530\0\u2585\0\u25da"+
    "\0\u262f\0\u2684\0\u26d9\0\u272e\0\u2783\0\u27d8\0\u282d\0\u2882"+
    "\0\u28d7\0\u292c\0\u2981\0\u29d6\0\u07a3\0\u2a2b\0\u2a80\0\u2ad5"+
    "\0\u2b2a\0\u2b7f\0\u2bd4\0\u2c29\0\u2c7e\0\u1298\0\u2cd3\0\u1298"+
    "\0\u2d28\0\u2d7d\0\u2dd2\0\u2e27\0\u2e7c\0\u2ed1\0\u2f26\0\u2f7b"+
    "\0\u2fd0\0\u3025\0\u0154\0\u0154\0\u307a\0\u30cf\0\u3124\0\u3179"+
    "\0\u31ce\0\u3223\0\u3278\0\u32cd\0\u3322\0\u3377\0\u33cc\0\u3421"+
    "\0\u3476\0\u34cb\0\u3520\0\u3575\0\u35ca\0\u361f\0\u3674\0\u36c9"+
    "\0\u371e\0\u3773\0\u37c8\0\u381d\0\u3872\0\u38c7\0\u391c\0\u07a3"+
    "\0\u3971\0\u39c6\0\u3a1b\0\u3a70\0\u3ac5\0\u3b1a\0\u3b6f\0\u07a3"+
    "\0\u3bc4\0\u3c19\0\u3c6e\0\u3cc3\0\u3d18\0\u3d6d\0\u3dc2\0\u3e17"+
    "\0\u3e6c\0\u3ec1\0\u3f16\0\u3f6b\0\u3fc0\0\u4015\0\u406a\0\u40bf"+
    "\0\u4114\0\u4169\0\u41be\0\u4213\0\u4268\0\u42bd\0\u4312\0\u4367"+
    "\0\u43bc\0\u4411\0\u4466\0\u0154\0\u44bb\0\u4510\0\u4565\0\u45ba"+
    "\0\u460f\0\u4664\0\u46b9\0\u470e\0\u4763\0\u47b8\0\u480d\0\u4862"+
    "\0\u48b7\0\u490c\0\u4961\0\u49b6\0\u4a0b\0\u4a60\0\u4ab5\0\u4b0a"+
    "\0\u4b5f\0\u4bb4\0\u4c09\0\u4c5e\0\u4cb3\0\u4d08\0\u4d5d\0\u4db2"+
    "\0\u4e07\0\u4e5c\0\u4eb1\0\u4f06\0\u4f5b\0\u4fb0\0\u5005\0\u505a"+
    "\0\u50af\0\u5104\0\u5159\0\u51ae\0\u5203\0\u5258\0\u52ad\0\u5302"+
    "\0\u5357\0\u53ac\0\u5401\0\u5456\0\u54ab\0\u5500\0\u5555\0\u55aa"+
    "\0\u55ff\0\u5654\0\u56a9\0\u56fe\0\u5753\0\u57a8\0\u57fd\0\u5852"+
    "\0\u58a7\0\u58fc\0\u5951\0\u59a6\0\u59fb\0\u5a50\0\u5aa5\0\u5afa"+
    "\0\u5b4f\0\u5ba4\0\u5bf9\0\u5c4e\0\u5ca3\0\u5cf8\0\u5d4d\0\u5da2"+
    "\0\u5df7\0\u5e4c\0\u5ea1\0\u5ef6\0\u5f4b\0\u5fa0\0\u5ff5\0\u604a"+
    "\0\u609f\0\u60f4\0\u6149\0\u619e\0\u61f3\0\u6248\0\u629d\0\u62f2"+
    "\0\u6347\0\u639c\0\u63f1\0\u6446\0\u1298\0\u649b\0\377\0\u64f0"+
    "\0\u6545\0\u659a\0\u65ef\0\u6644\0\u6699\0\u66ee\0\u6743\0\u6798"+
    "\0\u67ed\0\u6842\0\u6897\0\u68ec\0\u6941\0\u6996\0\u69eb\0\u5da2"+
    "\0\u6a40\0\u5ea1\0\u6a95\0\u6aea\0\u6b3f\0\u6b94\0\u6be9\0\u6c3e"+
    "\0\u6c93\0\u6ce8\0\u6d3d\0\u6d92\0\u6de7\0\u07a3\0\u6e3c\0\u6e91"+
    "\0\u6ee6\0\u6f3b\0\u6f90\0\u6fe5\0\u703a\0\u708f\0\u70e4\0\u7139"+
    "\0\u718e\0\u71e3\0\u7238\0\u728d\0\u72e2\0\u7337\0\u738c\0\u73e1"+
    "\0\u7436\0\u748b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\5"+
    "\1\21\1\22\1\23\1\24\1\25\1\5\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\27\1\35\1\36"+
    "\1\6\1\5\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\27\1\5\1\45\1\46\1\47\1\50\1\51\2\4"+
    "\1\30\1\52\1\53\1\27\1\5\1\54\1\53\1\55"+
    "\4\5\1\56\3\5\1\57\2\5\1\60\3\5\1\61"+
    "\1\62\6\5\1\30\1\63\1\64\1\27\12\65\1\66"+
    "\30\65\1\67\5\65\1\70\14\65\1\71\2\65\1\72"+
    "\33\65\12\73\1\74\30\73\1\75\22\73\1\76\2\73"+
    "\1\77\33\73\7\4\1\0\17\4\11\0\3\4\2\0"+
    "\3\4\2\0\2\4\1\0\1\4\1\0\3\4\4\0"+
    "\2\4\1\0\30\4\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\3\100\1\6\1\100\1\6\1\101\1\0"+
    "\1\100\1\101\3\100\1\102\4\100\1\103\4\100\11\0"+
    "\1\100\1\6\1\100\2\0\2\100\1\6\2\0\1\103"+
    "\1\102\1\104\1\100\1\0\3\100\4\0\2\100\1\0"+
    "\30\100\4\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\22\5\1\105"+
    "\5\5\13\0\1\53\20\0\1\53\74\0\1\4\6\5"+
    "\1\0\1\5\1\106\5\5\1\107\1\110\6\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\4\5\1\111\1\112\11\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\2\5\1\113\25\5\4\0\1\4\6\5\1\0\4\5"+
    "\1\114\1\115\1\5\1\116\1\117\6\5\11\0\1\4"+
    "\2\5\2\0\1\5\1\120\1\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\2\5\1\121\1\5"+
    "\1\122\12\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\1\5"+
    "\1\123\10\5\1\124\4\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\1\125\7\5\1\126\6\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\1\5\1\127\1\5\1\130\7\5\1\131"+
    "\1\132\2\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\133\1\134\1\0\1\135\27\5\4\0\1\4\6\5"+
    "\1\0\1\5\1\136\15\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\5\5\1\137\2\5\1\140\3\5\1\112\2\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\141\1\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\4\5\1\142"+
    "\12\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\3\5\1\143"+
    "\3\5\1\144\7\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\12\5\1\145\4\5\11\0\1\4\2\5\2\0\1\5"+
    "\1\146\1\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\1\5\1\147\6\5\1\145\6\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\33\0\1\150\125\0\1\53\251\0\1\53\1\0\1\151"+
    "\16\0\1\152\53\0\27\153\1\154\3\153\1\155\4\153"+
    "\1\156\2\153\1\0\61\153\30\0\1\53\3\0\1\27"+
    "\120\0\1\53\4\0\1\27\117\0\1\53\6\0\1\53"+
    "\65\0\40\40\1\157\2\40\1\160\1\161\60\40\1\4"+
    "\6\5\1\0\10\5\1\162\6\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\7\5\1\163\1\164\6\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\3\100\1\6\1\100\1\6\1\101\1\0\1\100\1\101"+
    "\3\100\1\102\4\100\1\103\4\100\11\0\1\100\1\6"+
    "\1\165\2\0\2\100\1\6\2\0\1\103\1\102\1\104"+
    "\1\100\1\0\3\100\4\0\2\100\1\0\2\100\1\165"+
    "\25\100\54\0\1\44\54\0\1\4\5\5\1\166\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\15\5\1\167\12\5\7\0\1\104\1\0\1\104"+
    "\33\0\1\104\5\0\1\104\55\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\1\5"+
    "\1\170\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\7\4\1\0\1\171\1\172"+
    "\1\4\1\173\1\4\1\174\4\4\1\175\1\176\3\4"+
    "\11\0\3\4\2\0\3\4\1\177\1\0\2\4\1\0"+
    "\1\4\1\0\3\4\4\0\2\4\1\0\30\4\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\4\5\1\200\23\5\4\0"+
    "\1\4\6\5\1\0\6\5\1\201\2\5\1\202\5\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\203\1\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\6\5"+
    "\1\204\21\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\12\5"+
    "\1\205\15\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\1\5\1\206\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\12\5\1\207\15\5\4\0\1\4\5\5\1\210\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\6\5"+
    "\1\211\1\5\1\212\17\5\34\0\1\53\71\0\1\53"+
    "\32\0\1\53\72\0\1\53\1\0\12\65\1\0\30\65"+
    "\1\0\5\65\1\0\14\65\1\0\2\65\1\0\33\65"+
    "\13\0\1\213\53\0\1\214\67\0\1\215\161\0\1\216"+
    "\126\0\1\217\33\0\12\73\1\0\30\73\1\0\22\73"+
    "\1\0\2\73\1\0\33\73\13\0\1\220\53\0\1\221"+
    "\124\0\1\222\126\0\1\223\33\0\7\100\1\0\17\100"+
    "\11\0\3\100\2\0\3\100\2\0\2\100\1\0\1\100"+
    "\1\0\3\100\4\0\2\100\1\0\30\100\4\0\3\100"+
    "\1\224\1\100\1\224\1\100\1\225\17\100\10\0\1\225"+
    "\1\100\1\224\1\100\2\0\2\100\1\224\2\0\2\100"+
    "\1\0\1\100\1\0\3\100\4\0\2\100\1\0\30\100"+
    "\4\0\7\100\1\0\12\100\1\226\4\100\11\0\3\100"+
    "\2\0\3\100\2\0\1\226\1\100\1\0\1\100\1\0"+
    "\3\100\4\0\2\100\1\0\30\100\4\0\7\100\1\0"+
    "\5\100\1\226\11\100\11\0\3\100\2\0\3\100\2\0"+
    "\1\100\1\226\1\0\1\100\1\0\3\100\4\0\2\100"+
    "\1\0\30\100\4\0\3\100\1\104\1\100\1\104\1\227"+
    "\1\0\1\100\1\227\1\230\2\100\1\230\11\100\11\0"+
    "\1\100\1\104\1\100\2\0\2\100\1\104\2\0\1\100"+
    "\1\230\1\0\1\230\1\0\3\100\4\0\2\100\1\0"+
    "\30\100\4\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\11\5\1\231"+
    "\16\5\4\0\1\4\6\5\1\0\2\5\1\232\14\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\14\5\1\233\2\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\12\5\1\234\4\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\12\5\1\235\4\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\6\5\1\236\10\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\237\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\10\5\1\240\6\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\14\5\1\241\2\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\7\5\1\121\7\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\10\5\1\164\6\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\11\5\1\242\5\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\243\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\1\244\27\5"+
    "\4\0\1\4\6\5\1\0\16\5\1\245\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\3\5\1\246\13\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\4\5\1\247\7\5\1\250\2\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\251\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\15\5\1\252\1\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\1\253\24\5\4\0\1\4\6\5\1\0\7\5\1\254"+
    "\7\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\1\255\2\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\10\5\1\256\6\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\7\5\1\257\4\5"+
    "\1\260\2\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\3\5"+
    "\1\261\13\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\6\5"+
    "\1\262\6\5\1\263\1\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\5\1\264\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\1\5\1\265\15\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\4\5\1\266\12\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\14\5\1\267\2\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\3\5\1\270\2\5\1\271\10\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\2\5\1\272\25\5"+
    "\4\0\1\4\6\5\1\0\3\5\1\273\13\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\274\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\6\5\1\244\1\5\1\275\6\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\276\1\0\30\5"+
    "\34\0\10\53\65\0\33\277\1\300\7\277\1\0\110\277"+
    "\1\301\3\277\1\300\7\277\1\0\66\277\1\302\3\277"+
    "\2\153\1\277\1\153\2\277\1\153\4\277\1\153\2\277"+
    "\1\153\3\277\1\303\4\277\1\153\1\304\1\305\1\0"+
    "\3\153\1\304\17\277\1\153\3\277\1\305\31\277\5\160"+
    "\1\40\3\160\2\40\1\160\1\40\2\160\1\40\4\160"+
    "\1\40\2\160\1\40\3\160\1\40\4\160\2\40\1\306"+
    "\1\0\4\40\17\160\1\40\3\160\1\306\71\160\1\307"+
    "\3\160\1\310\60\160\1\4\6\5\1\0\3\5\1\311"+
    "\1\5\1\312\11\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\1\5\1\313\15\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\2\5\1\244\25\5\4\0\3\100\4\314\1\0"+
    "\3\314\6\100\1\314\2\100\1\314\2\100\11\0\1\100"+
    "\1\314\1\100\2\0\1\100\2\314\2\0\2\100\1\0"+
    "\1\314\1\0\3\100\4\0\2\100\1\0\14\100\3\314"+
    "\11\100\4\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\315\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\24\5\1\316\3\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\12\5\1\317\15\5\4\0"+
    "\7\4\1\0\1\4\1\320\15\4\11\0\3\4\2\0"+
    "\3\4\2\0\2\4\1\0\1\4\1\0\3\4\4\0"+
    "\2\4\1\0\30\4\4\0\7\4\1\0\4\4\1\321"+
    "\1\322\1\4\1\323\7\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\2\4"+
    "\1\0\30\4\4\0\7\4\1\0\2\4\1\324\1\4"+
    "\1\325\12\4\11\0\3\4\2\0\3\4\2\0\2\4"+
    "\1\0\1\4\1\0\3\4\4\0\2\4\1\0\30\4"+
    "\4\0\7\4\1\0\3\4\1\326\13\4\11\0\3\4"+
    "\2\0\3\4\2\0\2\4\1\0\1\4\1\0\3\4"+
    "\4\0\2\4\1\0\30\4\4\0\7\4\1\0\4\4"+
    "\1\327\12\4\11\0\3\4\2\0\3\4\2\0\2\4"+
    "\1\0\1\4\1\0\3\4\4\0\2\4\1\0\30\4"+
    "\4\0\7\4\1\0\7\4\1\330\7\4\11\0\3\4"+
    "\2\0\3\4\2\0\2\4\1\0\1\4\1\0\3\4"+
    "\4\0\2\4\1\0\30\4\14\0\1\331\1\332\1\0"+
    "\1\333\1\0\1\334\4\0\1\335\1\336\24\0\1\177"+
    "\54\0\1\4\6\5\1\0\13\5\1\337\3\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\11\5\1\340\5\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\341\1\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\3\5\1\342\13\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\7\5\1\343\20\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\13\5\1\344\14\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\15\5\1\345\12\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\11\5\1\346\16\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\1\5\1\347\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\24\5\1\350\3\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\6\5\1\351\21\5\21\0\1\352"+
    "\132\0\1\353\170\0\1\354\126\0\1\355\50\0\1\356"+
    "\132\0\1\357\170\0\1\360\126\0\1\361\33\0\3\100"+
    "\1\224\1\100\1\224\1\100\1\0\5\100\1\102\4\100"+
    "\1\103\4\100\11\0\1\100\1\224\1\100\2\0\2\100"+
    "\1\224\2\0\1\103\1\102\1\0\1\100\1\0\3\100"+
    "\4\0\2\100\1\0\30\100\7\0\1\224\1\0\1\224"+
    "\33\0\1\224\5\0\1\224\55\0\3\100\1\362\1\100"+
    "\1\362\1\100\1\363\17\100\10\0\1\363\1\100\1\362"+
    "\1\100\2\0\2\100\1\362\2\0\2\100\1\0\1\100"+
    "\1\0\3\100\4\0\2\100\1\0\30\100\4\0\1\4"+
    "\1\5\1\364\4\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\14\5\1\365\2\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\1\366\27\5\4\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\1\5\1\367"+
    "\1\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\16\5\1\121\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\1\5\1\121\15\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\1\5\1\370\15\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\14\5\1\371\2\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\16\5\1\255\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\5\5"+
    "\1\372\11\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\1\5\1\373\4\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\1\374\2\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\15\5\1\243"+
    "\1\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\1\244\16\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\1\5\1\375\4\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\4\5\1\376\12\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\1\5\1\377\15\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\3\5\1\u0100\13\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\1\5\1\244\15\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\7\5\1\371\7\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\11\5\1\u0101\1\u0102"+
    "\4\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\u0103\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\u0104\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\3\5\1\u0105\13\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\3\5\1\u0106\13\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\12\5\1\u0107\4\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\14\5\1\u0108\2\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\6\5\1\u0109\10\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\u010a\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\7\5\1\243\7\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\10\5\1\u010b\6\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\3\5\1\u010c\13\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\3\5\1\244\13\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\4\5\1\u010d\12\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\10\5\1\121\6\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\7\5\1\u010d\7\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\1\5\1\u010e\4\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\33\277\1\155\7\277\1\0\111\277\3\153"+
    "\1\303\4\153\3\277\1\0\66\277\1\153\25\277\1\300"+
    "\5\277\1\153\1\277\1\0\3\277\1\153\55\277\33\0"+
    "\1\300\71\0\5\277\1\302\25\277\1\300\5\277\1\302"+
    "\1\277\1\0\3\277\1\302\60\277\4\u010f\1\277\3\u010f"+
    "\6\277\1\u010f\2\277\1\u010f\6\277\1\155\5\277\1\u010f"+
    "\1\277\1\0\2\277\2\u010f\5\277\1\u010f\27\277\3\u010f"+
    "\15\277\3\160\4\u0110\1\160\3\u0110\6\160\1\u0110\2\160"+
    "\1\u0110\13\160\1\307\1\u0110\2\160\1\310\1\160\2\u0110"+
    "\5\160\1\u0110\27\160\3\u0110\60\160\1\0\61\160\1\4"+
    "\6\5\1\0\1\243\16\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\14\5\1\u0111\2\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\14\5\1\u0112\2\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\3\100\4\314"+
    "\1\0\3\314\2\100\1\u0113\3\100\1\314\1\u0114\1\100"+
    "\1\314\2\100\11\0\1\100\1\314\1\100\2\0\1\100"+
    "\2\314\2\0\1\u0114\1\u0113\1\0\1\314\1\0\3\100"+
    "\4\0\2\100\1\0\14\100\3\314\11\100\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\11\5\1\344\16\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\7\5\1\u0115\20\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\15\5\1\315\12\5\4\0\7\4"+
    "\1\0\2\4\1\174\14\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\2\4"+
    "\1\0\30\4\4\0\7\4\1\0\1\u0116\16\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\30\4\4\0\7\4\1\0"+
    "\3\4\1\u0117\2\4\1\u0118\10\4\11\0\3\4\2\0"+
    "\3\4\2\0\2\4\1\0\1\4\1\0\3\4\4\0"+
    "\2\4\1\0\30\4\4\0\7\4\1\0\7\4\1\u0119"+
    "\7\4\11\0\3\4\2\0\3\4\2\0\2\4\1\0"+
    "\1\4\1\0\3\4\4\0\2\4\1\0\30\4\4\0"+
    "\7\4\1\0\1\u011a\3\4\1\327\12\4\11\0\3\4"+
    "\2\0\3\4\2\0\2\4\1\0\1\4\1\0\3\4"+
    "\4\0\2\4\1\0\30\4\4\0\7\4\1\0\11\4"+
    "\1\u011b\5\4\11\0\3\4\2\0\3\4\2\0\2\4"+
    "\1\0\1\4\1\0\3\4\4\0\2\4\1\0\30\4"+
    "\4\0\7\4\1\0\4\4\1\u0118\12\4\11\0\3\4"+
    "\2\0\3\4\2\0\2\4\1\0\1\4\1\0\3\4"+
    "\4\0\2\4\1\0\30\4\4\0\7\4\1\0\1\u011a"+
    "\16\4\11\0\3\4\2\0\3\4\2\0\2\4\1\0"+
    "\1\4\1\0\3\4\4\0\2\4\1\0\30\4\4\0"+
    "\7\4\1\0\14\4\1\u011c\2\4\11\0\3\4\2\0"+
    "\3\4\2\0\2\4\1\0\1\4\1\0\3\4\4\0"+
    "\2\4\1\0\30\4\15\0\1\u011d\127\0\1\u011e\1\u011f"+
    "\1\0\1\u0120\117\0\1\u0121\1\0\1\u0122\123\0\1\u0123"+
    "\125\0\1\u0124\127\0\1\u0125\105\0\1\4\6\5\1\0"+
    "\1\5\1\u0126\15\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\14\5\1\u0127\2\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\14\5\1\u0128\2\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\5\5\1\236\11\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\10\5\1\315\17\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\16\5\1\u0129\11\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\11\5\1\u012a\16\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\1\5"+
    "\1\u012b\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\3\5\1\u012c\2\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\11\5\1\u012d\16\5\15\0\1\353\203\0\1\u012e\57\0"+
    "\1\u012f\155\0\1\u0130\61\0\1\357\203\0\1\u0131\57\0"+
    "\1\u0132\155\0\1\u0133\50\0\3\100\1\362\1\100\1\362"+
    "\1\100\1\0\2\100\1\230\2\100\1\230\11\100\11\0"+
    "\1\100\1\362\1\100\2\0\2\100\1\362\2\0\1\100"+
    "\1\230\1\0\1\230\1\0\3\100\4\0\2\100\1\0"+
    "\30\100\7\0\1\362\1\0\1\362\33\0\1\362\5\0"+
    "\1\362\55\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\11\5\1\u0134"+
    "\11\5\1\u0135\4\5\4\0\1\4\6\5\1\0\12\5"+
    "\1\u0136\4\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\1\5\1\u0137\4\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\5\5"+
    "\1\u0138\11\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\7\5"+
    "\1\u010b\7\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\243"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\12\5\1\u0139"+
    "\4\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\u013a\1\0"+
    "\30\5\4\0\1\4\1\5\1\371\4\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\13\5\1\u013b\3\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\6\5\1\0\1\5\1\311\15\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\1\4\1\5\1\371\4\5\1\0\10\5"+
    "\1\u013c\6\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\4\5"+
    "\1\u013d\12\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\14\5"+
    "\1\u010d\2\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\11\5"+
    "\1\u0109\5\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\3\5"+
    "\1\u013e\13\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\11\5"+
    "\1\u013f\5\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\3\5\1\255\24\5\4\0\1\4\6\5\1\0\6\5"+
    "\1\u0140\10\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\7\5"+
    "\1\u0141\7\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\4\5"+
    "\1\244\2\5\1\244\7\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\121\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\3\5\1\u0142\13\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\4\5\1\121\12\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\15\5\1\252\1\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\244\1\0\30\5\4\0\1\4\6\5\1\0\6\5"+
    "\1\u0143\10\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\2\5\1\u0144\1\5\1\u0144\23\5\4\0"+
    "\3\277\4\153\1\277\3\153\6\277\1\153\2\277\1\153"+
    "\6\277\1\155\5\277\1\153\1\277\1\0\2\277\2\153"+
    "\5\277\1\153\27\277\3\153\15\277\3\160\4\40\1\160"+
    "\3\40\6\160\1\40\2\160\1\40\13\160\1\307\1\40"+
    "\2\160\1\310\1\160\2\40\5\160\1\40\27\160\3\40"+
    "\15\160\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\203\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\1\5\1\121\26\5\4\0"+
    "\7\100\1\0\12\100\1\u0145\4\100\11\0\3\100\2\0"+
    "\3\100\2\0\1\u0145\1\100\1\0\1\100\1\0\3\100"+
    "\4\0\2\100\1\0\30\100\4\0\7\100\1\0\5\100"+
    "\1\u0145\11\100\11\0\3\100\2\0\3\100\2\0\1\100"+
    "\1\u0145\1\0\1\100\1\0\3\100\4\0\2\100\1\0"+
    "\30\100\4\0\1\4\1\5\1\u0146\4\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\4\0\7\4\1\0\3\4\1\u0117\13\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\30\4\4\0\7\4\1\0"+
    "\2\4\1\u0147\14\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\30\4\4\0\7\4\1\0\1\4\1\u0147\15\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\30\4\4\0\7\4\1\0"+
    "\10\4\1\u0148\6\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\30\4\4\0\7\4\1\0\1\4\1\u0117\15\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\30\4\4\0\7\4\1\0"+
    "\5\4\1\u0149\11\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\30\4\4\0\7\4\1\0\15\4\1\u014a\1\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\30\4\16\0\1\334\122\0"+
    "\1\u014b\127\0\1\u014c\2\0\1\u014d\125\0\1\u014e\115\0"+
    "\1\u014f\3\0\1\u0124\131\0\1\u0150\117\0\1\u014d\120\0"+
    "\1\u014f\140\0\1\u0151\100\0\1\4\6\5\1\0\1\u0152"+
    "\16\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\4\5\1\u0153"+
    "\12\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\7\5\1\374"+
    "\7\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\17\5"+
    "\1\344\10\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\12\5"+
    "\1\u0154\15\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\12\5"+
    "\1\u0155\15\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\12\5"+
    "\1\u0156\15\5\4\0\1\4\5\5\1\344\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\30\5\36\0\1\u0157\110\0\1\353\51\0\1\u012e\35\0"+
    "\1\u0130\1\u0158\4\u0130\1\u0158\17\u0130\3\u0158\1\u0130\1\u0158"+
    "\2\0\2\u0158\1\0\2\u0130\2\0\3\u0130\1\0\1\u0158"+
    "\2\u0130\1\u0158\1\u0130\1\0\1\u0158\1\u0130\5\u0158\2\u0130"+
    "\1\u0158\30\u0130\1\0\1\u0158\34\0\1\u0159\110\0\1\357"+
    "\51\0\1\u0131\35\0\1\u0133\1\u015a\4\u0133\1\u015a\17\u0133"+
    "\3\u015a\1\u0133\1\u015a\2\0\2\u015a\1\0\2\u0133\2\0"+
    "\3\u0133\1\0\1\u015a\2\u0133\1\u015a\1\u0133\1\0\1\u015a"+
    "\1\u0133\5\u015a\2\u0133\1\u015a\30\u0133\1\0\1\u015a\2\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\20\5\1\u015b\7\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\1\u015c\1\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\5\5\1\u0109\11\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\13\5\1\u015d\3\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\1\5\1\243\15\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\30\5\4\0\1\4"+
    "\6\5\1\0\1\u0138\16\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\10\5\1\u015e\6\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\3\5\1\u015f\13\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\2\5\1\121\14\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\30\5\4\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\u0153\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\11\5\1\121\5\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\121"+
    "\1\5\1\0\30\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\u0160"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\4\5\1\114"+
    "\12\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\4\5\1\u0161"+
    "\12\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\11\5\1\u0162"+
    "\5\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\6\5\1\262"+
    "\10\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\30\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\24\5"+
    "\1\u0163\3\5\4\0\7\4\1\0\7\4\1\u0147\7\4"+
    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\30\4\4\0\7\4"+
    "\1\0\12\4\1\u0164\4\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\2\4"+
    "\1\0\30\4\4\0\7\4\1\0\16\4\1\u0165\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\30\4\17\0\1\u014c\123\0"+
    "\1\u0166\123\0\1\u0166\133\0\1\u0167\115\0\1\u014c\130\0"+
    "\1\u0168\134\0\1\u0169\77\0\1\4\6\5\1\0\1\5"+
    "\1\u013c\15\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\2\5"+
    "\1\244\14\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\30\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\25\5\1\344\2\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\21\5\1\344\6\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\21\5\1\u016a\6\5\36\0\1\u0130\124\0\1\u0133\72\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\13\5\1\u012d\14\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\6\5\1\315\21\5\4\0"+
    "\1\4\6\5\1\0\10\5\1\144\6\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\1\5\1\u016b\4\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\2\5\1\u016c\25\5\4\0"+
    "\1\4\6\5\1\0\1\5\1\117\15\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\12\5\1\236\4\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\7\5\1\u016d\7\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\30\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\15\5\1\u016e\12\5\4\0"+
    "\7\4\1\0\1\u0118\16\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\2\4"+
    "\1\0\30\4\4\0\7\4\1\0\14\4\1\u0147\2\4"+
    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\30\4\23\0\1\u0166"+
    "\127\0\1\u016f\130\0\1\u0170\76\0\1\4\1\5\1\u0171"+
    "\4\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\6\5\1\u0172\10\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\1\5\1\u0173\15\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\1\5\1\u0174\15\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\30\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\25\5\1\u012d\2\5\14\0\1\u014d\140\0\1\u0166"+
    "\100\0\1\4\6\5\1\0\17\5\11\0\1\4\1\5"+
    "\1\u0175\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\20\5\1\u0175"+
    "\7\5\4\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\u0176\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\5\5\1\u0177\11\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\1\5\1\u0178\15\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\26\5\1\u0179\1\5"+
    "\4\0\1\4\6\5\1\0\7\5\1\244\7\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\1\5\1\u0144\4\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\4\5\1\244\12\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\30\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\6\5\1\u017a\21\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\27\5\1\u012d\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29920];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\24\1\1\11\6\1\1\11\10\1\1\11\1\1"+
    "\2\11\13\1\1\11\5\1\1\11\52\1\1\0\2\11"+
    "\2\1\1\11\3\1\1\11\15\1\1\0\13\1\2\0"+
    "\1\11\6\0\1\1\1\0\52\1\1\11\7\1\1\11"+
    "\20\1\6\0\13\1\10\0\1\1\1\0\51\1\4\0"+
    "\1\1\4\0\10\1\2\0\1\1\2\0\30\1\7\0"+
    "\5\1\4\0\13\1\1\11\3\0\5\1\2\0\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;



  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public PixiTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *                    <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
	//	zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PixiTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PixiTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  
    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }




  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 28: 
          { addToken(Token.PREPROCESSOR);
          }
        case 31: break;
        case 7: 
          { addNullToken(); return firstToken;
          }
        case 32: break;
        case 25: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 33: break;
        case 22: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 34: break;
        case 18: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 35: break;
        case 9: 
          { addToken(Token.WHITESPACE);
          }
        case 36: break;
        case 27: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 37: break;
        case 19: 
          { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
          }
        case 38: break;
        case 26: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 39: break;
        case 14: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 40: break;
        case 15: 
          { addToken(Token.RESERVED_WORD);
          }
        case 41: break;
        case 5: 
          { addToken(Token.SEPARATOR);
          }
        case 42: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 43: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 44: break;
        case 17: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 45: break;
        case 24: 
          { addToken(Token.FUNCTION);
          }
        case 46: break;
        case 6: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 47: break;
        case 8: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 48: break;
        case 23: 
          { addToken(Token.DATA_TYPE);
          }
        case 49: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 50: break;
        case 20: 
          { addToken(Token.ERROR_CHAR);
          }
        case 51: break;
        case 21: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 52: break;
        case 30: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 53: break;
        case 29: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 54: break;
        case 16: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 55: break;
        case 13: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 56: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 57: break;
        case 4: 
          { addToken(Token.OPERATOR);
          }
        case 58: break;
        case 10: 
          { 
          }
        case 59: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 60: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 379: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 380: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 381: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
